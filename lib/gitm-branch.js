#!/usr/bin/env node
const program=require("commander");const sh=require("shelljs");const{options,args}=require("./conf/branch");const{queue}=require("./js/index");const{createArgs}=require("./js/tools");program.name("gitm branch").usage("[-k --key [keyword]] [-t --type [type]] [-d --delete [branch]] [-r --remote [remote]] [-D --forcedelete [branch]]").description("分支查询、删除（注意该指令不用于创建分支，如需创建分支请走start流程）");if(args.length>0)program.arguments(createArgs(args));options.forEach(o=>{program.option(o.flags,o.description,o.defaultValue)});program.action(opt=>{let cmd=[];if(opt.delete){const id=sh.exec(`git rev-parse --verify ${opt.delete}`,{silent:true}).stdout.replace(/[\s]*$/g,"");if(/^[a-z0-9]+$/.test(id))cmd.push(`git branch -d ${opt.delete}`);if(opt.remote)cmd.push(`git push origin --delete ${opt.delete}`)}else if(opt.forcedelete){const id=sh.exec(`git rev-parse --verify ${opt.delete}`,{silent:true}).stdout.replace(/[\s]*$/g,"");if(/^[a-z0-9]+$/.test(id))cmd.push(`git branch -D ${opt.forcedelete}`);if(opt.remote)cmd.push(`git push origin --delete ${opt.delete}`)}else if(opt.upstream){if(typeof opt.upstream==="string"){cmd.push(`git branch --set-upstream-to origin/${opt.upstream}`)}else{cmd.push(`git branch --unset-upstream`)}}else{cmd.push(`git branch -a`);queue(cmd).then(data=>{data.forEach((el,index)=>{if(index===0&&el.code===0){let list=el.out&&el.out.split("\n")||[];list=list.filter(el2=>{let fit=true;if(opt.key){fit=fit&&el2.indexOf(opt.key)>-1}if(opt.type){fit=fit&&el2.indexOf(opt.type)>-1}if(opt.remote){fit=fit&&el2.indexOf("remotes/origin")>-1}else{fit=fit&&el2.indexOf("remotes/origin")===-1}return fit});sh.echo(list.join("\n"))}})});return}queue(cmd)});program.parse(process.argv);