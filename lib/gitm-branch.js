#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),r=require("fs"),a=require("colors"),s=require("slash"),i=require("cosmiconfig");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=o(t),l=o(r),c=o(a),u=o(s);const f=[],d=[{flags:"-k, --key [keyword]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-k",long:"--key",negate:!1,description:"查询分支的关键词",defaultValue:null},{flags:"-r, --remote",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"-r",long:"--remote",negate:!1,description:"是否查询远程分支（这个参数不用于删除分支）默认只查询本地",defaultValue:!1},{flags:"-t, --type [type]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-t",long:"--type",negate:!1,description:"查询分支的类型，共有3种：feature、bugfix、support，不传则查询全部",defaultValue:null},{flags:"-d, --delete [branch]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-d",long:"--delete",negate:!1,description:"删除分支",defaultValue:null},{flags:"-D, --forcedelete [branch]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-D",long:"--forcedelete",negate:!1,description:"强行删除分支",defaultValue:null},{flags:"-u, --upstream [upstream]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-u",long:"--upstream",negate:!1,description:"设置与远程分支关联"}];function g(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[r,a,s,i,o=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:a||".",gitCommonDir:s,root:r,gitDir:i,gitHookDir:i+"/hooks",cdup:o}}const p={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function m(e,t="gitmars"){let r;if(!e){let{root:t}=g();try{e=t+"/gitmarsconfig.json",r=l.default.statSync(e)}catch(r){e=t}}const a={skipCI:!0},s=i.cosmiconfigSync(t);if(r||(r=l.default.statSync(e)),r.isDirectory()){const{config:t={},filepath:r=""}=s.search(e)||{};return Object.assign({},p,a,t,{filepath:r})}{const{config:t={},filepath:r=""}=s.load(e)||{};return Object.assign({},p,a,t,{filepath:r})}}function h(e){return c.default.red(e)}function y(e,t){0!==e.length?t(e[0],((r=!1)=>{r||(e.shift(),y(e,t))})):t()}function b(e){return new Promise(((t,r)=>{let a=[];0===e.length&&r("指令名称不能为空"),y(e=JSON.parse(JSON.stringify(e)),((r,s)=>{let i={silent:!0,postmsg:!1,kill:!0,again:!1},o=r;r instanceof Object&&(i=Object.assign(i,r.config||{}),o=r.cmd),o?n.default.exec(o,i,((t,l,u)=>{let f=function(e){let t={},r=e.replace(/[\s]+/g," ").split(" ");if(r.length<2||"git"!==r[0])return t;switch(r[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(o);try{l=JSON.parse(l)}catch(u){l=l.replace(/\n*$/g,"")}if(a.push({code:t,out:l,err:u,cfg:i,cmd:o}),0!==t&&function(e){const{gitDir:t}=g();n.default.touch(t+"/.gitmarslog"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:r,code:t,out:l,err:u}),0!==t&&i.kill){let t=JSON.parse(JSON.stringify(e));i.again?!0!==i.again&&t.splice(0,1,i.again):t.shift(),s(!0),function(e){const{gitDir:t}=g();n.default.touch(t+"/.gitmarscommands"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),i.silent&&n.default.echo(h(u)),n.default.echo(h(i.fail||f.fail||"出错了！指令 "+o+" 执行失败，中断了进程")),i.postmsg&&v("出错了！指令 "+o+" 执行失败，中断了进程"),t.length>0&&n.default.echo(h("请处理相关问题之后输入gitm continue继续")),n.default.exit(1)}else{if(0===t){let e=i.success||f.success;e&&(n.default.echo((d=e,c.default.green(d))),i.postmsg&&v(e))}else{let e=i.fail||f.fail||"指令 "+o+" 执行失败";e&&n.default.echo(function(e){return c.default.yellow(e)}(e))}s()}var d})):t(a)}))}))}function k(e){const{root:t}=g(),{appName:r}=function(e=process.cwd()){const t=n.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[r]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:r,appName:r.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),a=m();let s="",i=new Date;switch(e){case"time":s=i;break;case"timeNum":s=i.getTime();break;case"pwd":s=t;break;case"project":s=r;break;case"user":s=a.user}return s}function v(e=""){const t=m();if(!t.msgTemplate)return void n.default.echo(h("请配置消息发送api模板地址"));let r=(a=t.msgTemplate,s=t=>"message"===t?e:k(t),a&&s?""+a.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof s)return s(t);for(let e in s)if(t===e)return s[e]})):null);var a,s;t.msgUrl&&function(e="",t={}){const r=m(),{silent:a=!0}=t;if(!r.msgUrl)return void n.default.echo(h("请配置消息推送地址"));e=e.replace(/\s/g,""),r.msgUrl&&n.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${r.msgUrl}"`,{silent:a})}(r)}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(h("当前目录不是git项目目录")),n.default.exit(1)),e.program.name("gitm branch").usage("[-k --key [keyword]] [-t --type [type]] [-d --delete [branch]] [-r --remote [remote]] [-D --forcedelete [branch]]").description("分支查询、删除（注意该指令不用于创建分支，如需创建分支请走start流程）"),f.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let r=e.name;e.variadic&&(r+="..."),r=e.required?"<"+r+">":"["+r+"]",t.push(r)})),t.join(" ")}(f)),d.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action((e=>{let t=[];if(e.delete){const r=n.default.exec(`git rev-parse --verify ${e.delete}`,{silent:!0}).stdout.replace(/[\s]*$/g,"");/^[a-z0-9]+$/.test(r)&&t.push(`git branch -d ${e.delete}`),e.remote&&t.push(`git push origin --delete ${e.delete}`)}else if(e.forcedelete){const r=n.default.exec(`git rev-parse --verify ${e.delete}`,{silent:!0}).stdout.replace(/[\s]*$/g,"");/^[a-z0-9]+$/.test(r)&&t.push(`git branch -D ${e.forcedelete}`),e.remote&&t.push(`git push origin --delete ${e.delete}`)}else{if(!e.upstream)return t.push("git branch -a"),void b(t).then((t=>{t.forEach(((t,r)=>{if(0===r&&0===t.code){let r=t.out&&t.out.split("\n")||[];r=r.filter((t=>{let r=!0;return e.key&&(r=r&&t.indexOf(e.key)>-1),e.type&&(r=r&&t.indexOf(e.type)>-1),r=e.remote?r&&t.indexOf("remotes/origin")>-1:r&&-1===t.indexOf("remotes/origin"),r})),n.default.echo(r.join("\n"))}}))}));"string"==typeof e.upstream?t.push(`git branch --set-upstream-to origin/${e.upstream}`):t.push("git branch --unset-upstream")}b(t)})),e.program.parse(process.argv);
