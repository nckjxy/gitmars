#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),r=require("fs"),s=require("colors"),a=require("slash"),i=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=c(t),o=c(r),l=c(s),u=c(a);const f=[{required:!1,name:"commitid",variadic:!1,validator:(e,t,r)=>{r()},description:"需要撤销的ID"}],m=[{flags:"-n, --number [number]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-n",long:"--number",negate:!1,description:"撤销最后一次提交（或者撤销倒数第n次提交）",defaultValue:""},{flags:"-m, --mode [mode]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-m",long:"--mode",negate:!1,description:"针对撤销一次merge记录，需要传入类型：1 = 保留当前分支代码，2 = 保留传入代码",defaultValue:""}];function g(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[r,s,a,i,c=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:s||".",gitCommonDir:a,root:r,gitDir:i,gitHookDir:i+"/hooks",cdup:c}}const d={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function p(e,t="gitmars"){let r;if(!e){let{root:t}=g();try{e=t+"/gitmarsconfig.json",r=o.default.statSync(e)}catch(r){e=t}}const s={skipCI:!0},a=i.cosmiconfigSync(t);if(r||(r=o.default.statSync(e)),r.isDirectory()){const{config:t={},filepath:r=""}=a.search(e)||{};return Object.assign({},d,s,t,{filepath:r})}{const{config:t={},filepath:r=""}=a.load(e)||{};return Object.assign({},d,s,t,{filepath:r})}}function h(e){return l.default.yellow(e)}function b(e){return l.default.red(e)}function k(e,t){0!==e.length?t(e[0],((r=!1)=>{r||(e.shift(),k(e,t))})):t()}function v(e){return new Promise(((t,r)=>{let s=[];0===e.length&&r("指令名称不能为空"),k(e=JSON.parse(JSON.stringify(e)),((r,a)=>{let i={silent:!0,postmsg:!1,kill:!0,again:!1},c=r;r instanceof Object&&(i=Object.assign(i,r.config||{}),c=r.cmd),c?n.default.exec(c,i,((t,o,u)=>{let f=function(e){let t={},r=e.replace(/[\s]+/g," ").split(" ");if(r.length<2||"git"!==r[0])return t;switch(r[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{o=JSON.parse(o)}catch(u){o=o.replace(/\n*$/g,"")}if(s.push({code:t,out:o,err:u,cfg:i,cmd:c}),0!==t&&function(e){const{gitDir:t}=g();n.default.touch(t+"/.gitmarslog"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:r,code:t,out:o,err:u}),0!==t&&i.kill){let t=JSON.parse(JSON.stringify(e));i.again?!0!==i.again&&t.splice(0,1,i.again):t.shift(),a(!0),function(e){const{gitDir:t}=g();n.default.touch(t+"/.gitmarscommands"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),i.silent&&n.default.echo(b(u)),n.default.echo(b(i.fail||f.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),i.postmsg&&x("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&n.default.echo(b("请处理相关问题之后输入gitm continue继续")),n.default.exit(1)}else{if(0===t){let e=i.success||f.success;e&&(n.default.echo((m=e,l.default.green(m))),i.postmsg&&x(e))}else{let e=i.fail||f.fail||"指令 "+c+" 执行失败";e&&n.default.echo(h(e))}a()}var m})):t(s)}))}))}function y(e){const{root:t}=g(),{appName:r}=function(e=process.cwd()){const t=n.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[r]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:r,appName:r.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),s=p();let a="",i=new Date;switch(e){case"time":a=i;break;case"timeNum":a=i.getTime();break;case"pwd":a=t;break;case"project":a=r;break;case"user":a=s.user}return a}function x(e=""){const t=p();if(!t.msgTemplate)return void n.default.echo(b("请配置消息发送api模板地址"));let r=(s=t.msgTemplate,a=t=>"message"===t?e:y(t),s&&a?""+s.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof a)return a(t);for(let e in a)if(t===e)return a[e]})):null);var s,a;t.msgUrl&&function(e="",t={}){const r=p(),{silent:s=!0}=t;if(!r.msgUrl)return void n.default.echo(b("请配置消息推送地址"));e=e.replace(/\s/g,""),r.msgUrl&&n.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${r.msgUrl}"`,{silent:s})}(r)}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(b("当前目录不是git项目目录")),n.default.exit(1)),e.program.name("gitm revert").usage("[commitid] [-n --number [number]] [-m --mode [mode]]").description("撤销一次提交记录"),f.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let r=e.name;e.variadic&&(r+="..."),r=e.required?"<"+r+">":"["+r+"]",t.push(r)})),t.join(" ")}(f)),m.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t)=>{let r=[],s="HEAD",a="";if(t.mode&&(a=" -m "+Math.abs(Number(t.mode))),t.number){let e=Math.abs(Number(t.number));e>1&&(s+="~"+(e-1)),r.push({cmd:`git revert ${s}${a}`,config:{slient:!1,again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}})}else e?r.push({cmd:`git revert ${e}${a}`,config:{slient:!1,again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}}):(n.default.echo(h("指令不合法")),n.default.exit(1));v(r)})),e.program.parse(process.argv);
