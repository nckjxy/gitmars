#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),s=require("fs"),a=require("colors"),i=require("slash"),r=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=c(t),o=c(s),l=c(a),u=c(i);function f(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,a,i,r,c=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:a||".",gitCommonDir:i,root:s,gitDir:r,gitHookDir:r+"/hooks",cdup:c}}const g={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function m(e,t="gitmars"){let s;if(!e){let{root:t}=f();try{e=t+"/gitmarsconfig.json",s=o.default.statSync(e)}catch(s){e=t}}const a={skipCI:!0},i=r.cosmiconfigSync(t);if(s||(s=o.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=i.search(e)||{};return Object.assign({},g,a,t,{filepath:s})}{const{config:t={},filepath:s=""}=i.load(e)||{};return Object.assign({},g,a,t,{filepath:s})}}function p(e){return l.default.red(e)}function d(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),d(e,t))})):t()}function h(e){return new Promise(((t,s)=>{let a=[];0===e.length&&s("指令名称不能为空"),d(e=JSON.parse(JSON.stringify(e)),((s,i)=>{let r={silent:!0,postmsg:!1,kill:!0,again:!1},c=s;s instanceof Object&&(r=Object.assign(r,s.config||{}),c=s.cmd),c?n.default.exec(c,r,((t,o,u)=>{let g=function(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{o=JSON.parse(o)}catch(u){o=o.replace(/\n*$/g,"")}if(a.push({code:t,out:o,err:u,cfg:r,cmd:c}),0!==t&&function(e){const{gitDir:t}=f();n.default.touch(t+"/.gitmarslog"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:s,code:t,out:o,err:u}),0!==t&&r.kill){let t=JSON.parse(JSON.stringify(e));r.again?!0!==r.again&&t.splice(0,1,r.again):t.shift(),i(!0),function(e){const{gitDir:t}=f();n.default.touch(t+"/.gitmarscommands"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),r.silent&&n.default.echo(p(u)),n.default.echo(p(r.fail||g.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),r.postmsg&&k("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&n.default.echo(p("请处理相关问题之后输入gitm continue继续")),n.default.exit(1)}else{if(0===t){let e=r.success||g.success;e&&(n.default.echo((m=e,l.default.green(m))),r.postmsg&&k(e))}else{let e=r.fail||g.fail||"指令 "+c+" 执行失败";e&&n.default.echo(function(e){return l.default.yellow(e)}(e))}i()}var m})):t(a)}))}))}function b(e){const{root:t}=f(),{appName:s}=function(e=process.cwd()){const t=n.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),a=m();let i="",r=new Date;switch(e){case"time":i=r;break;case"timeNum":i=r.getTime();break;case"pwd":i=t;break;case"project":i=s;break;case"user":i=a.user}return i}function k(e=""){const t=m();if(!t.msgTemplate)return void n.default.echo(p("请配置消息发送api模板地址"));let s=(a=t.msgTemplate,i=t=>"message"===t?e:b(t),a&&i?""+a.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof i)return i(t);for(let e in i)if(t===e)return i[e]})):null);var a,i;t.msgUrl&&function(e="",t={}){const s=m(),{silent:a=!0}=t;if(!s.msgUrl)return void n.default.echo(p("请配置消息推送地址"));e=e.replace(/\s/g,""),s.msgUrl&&n.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:a})}(s)}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(p("当前目录不是git项目目录")),n.default.exit(1)),e.program.name("gitm merge").usage("<name>").arguments("<name>").description("合并分支代码").action((e=>{h([{cmd:`git merge --no-ff ${e}`,config:{slient:!1,again:!1,success:`合并${e}分支成功`,fail:`合并${e}分支出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}])})),e.program.parse(process.argv);
