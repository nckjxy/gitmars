#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),s=require("fs"),a=require("colors"),i=require("slash"),r=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=c(t),n=c(s),l=c(a),u=c(i);const g={command:"copy",short:"cp",args:[{required:!0,name:"from",variadic:!1,validator:(e,t,s)=>{/\s+/.test(e)?s(new Error("请不要输入空格")):s()},description:"来源分支"},{required:!1,name:"commitid",variadic:!0,validator:(e,t,s)=>{s()},description:"提交记录ID"}],options:[{flags:"-k, --key [keyword]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-k",long:"--key",negate:!1,description:"模糊搜索commit信息关键词",defaultValue:""},{flags:"-a, --author [author]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-a",long:"--author",negate:!1,description:"提交者",defaultValue:""}],validatorOpts:(e,t,s)=>{s()},validatorArgs:(e,t,s)=>{s()},transformOpts:(e,t,s)=>{s()},transformArgs:(e,t,s)=>{s()}},f=g.args,d=g.options;function m(e=process.cwd()){const t=o.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,a,i,r,c=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:a||".",gitCommonDir:i,root:s,gitDir:r,gitHookDir:r+"/hooks",cdup:c}}const p={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function h(e,t="gitmars"){let s;if(!e){let{root:t}=m();try{e=t+"/gitmarsconfig.json",s=n.default.statSync(e)}catch(s){e=t}}const a={skipCI:!0},i=r.cosmiconfigSync(t);if(s||(s=n.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=i.search(e)||{};return Object.assign({},p,a,t,{filepath:s})}{const{config:t={},filepath:s=""}=i.load(e)||{};return Object.assign({},p,a,t,{filepath:s})}}function k(e){return l.default.yellow(e)}function y(e){return l.default.red(e)}function v(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),v(e,t))})):t()}function b(e){return new Promise(((t,s)=>{let a=[];0===e.length&&s("指令名称不能为空"),v(e=JSON.parse(JSON.stringify(e)),((s,i)=>{let r={silent:!0,postmsg:!1,kill:!0,again:!1},c=s;s instanceof Object&&(r=Object.assign(r,s.config||{}),c=s.cmd),c?o.default.exec(c,r,((t,n,u)=>{let g=function(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{n=JSON.parse(n)}catch(u){n=n.replace(/\n*$/g,"")}if(a.push({code:t,out:n,err:u,cfg:r,cmd:c}),0!==t&&function(e){const{gitDir:t}=m();o.default.touch(t+"/.gitmarslog"),o.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:s,code:t,out:n,err:u}),0!==t&&r.kill){let t=JSON.parse(JSON.stringify(e));r.again?!0!==r.again&&t.splice(0,1,r.again):t.shift(),i(!0),function(e){const{gitDir:t}=m();o.default.touch(t+"/.gitmarscommands"),o.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),r.silent&&o.default.echo(y(u)),o.default.echo(y(r.fail||g.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),r.postmsg&&w("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&o.default.echo(y("请处理相关问题之后输入gitm continue继续")),o.default.exit(1)}else{if(0===t){let e=r.success||g.success;e&&(o.default.echo((f=e,l.default.green(f))),r.postmsg&&w(e))}else{let e=r.fail||g.fail||"指令 "+c+" 执行失败";e&&o.default.echo(k(e))}i()}var f})):t(a)}))}))}function $(){let e=function(e={}){const{silent:t=!0}=e,s=o.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let a=s?s.replace(/\n(\s+)/g,"\n").split("\n"):[],i={A:[],D:[],M:[],"??":[]};return 0===a.length||a.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1);i[s]||(i[s]=[]),i[s].push(t.join(" "))})),i}({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(o.default.echo(y("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),o.default.exit(1),!1):(e["??"].length>0&&o.default.echo(k("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function x(e){const{root:t}=m(),{appName:s}=function(e=process.cwd()){const t=o.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),a=h();let i="",r=new Date;switch(e){case"time":i=r;break;case"timeNum":i=r.getTime();break;case"pwd":i=t;break;case"project":i=s;break;case"user":i=a.user}return i}function w(e=""){const t=h();if(!t.msgTemplate)return void o.default.echo(y("请配置消息发送api模板地址"));let s=(a=t.msgTemplate,i=t=>"message"===t?e:x(t),a&&i?""+a.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof i)return i(t);for(let e in i)if(t===e)return i[e]})):null);var a,i;t.msgUrl&&function(e="",t={}){const s=h(),{silent:a=!0}=t;if(!s.msgUrl)return void o.default.echo(y("请配置消息推送地址"));e=e.replace(/\s/g,""),s.msgUrl&&o.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:a})}(s)}o.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(o.default.echo(y("当前目录不是git项目目录")),o.default.exit(1)),e.program.name("gitm copy").usage("<from> [commitid...] [-k] [-a]").description("cherry-pick易用版本，从某个分支拷贝某条记录合并到当前分支"),f.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let s=e.name;e.variadic&&(s+="..."),s=e.required?"<"+s+">":"["+s+"]",t.push(s)})),t.join(" ")}(f)),d.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t,s)=>{let a=$(),i=o.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"");if(a||o.default.exit(1),""!==s.key||""!==s.author){let t=[`git checkout ${e}`,`git log --grep=${s.key} --author=${s.author}`];o.default.echo(k("为确保copy准确，请尽量完整填写关键词")),b(t).then((e=>{let t=[];if(0===e[1].code){let s=e[1].out.match(/(commit\s[a-z0-9]*\n+)/g)||[],a=[`git checkout ${i}`];s.forEach((e=>{t.push(e.replace(/(commit\s)|\n/g,""))})),t.reverse(),t.length>0?a=a.concat([{cmd:`git cherry-pick ${t.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):o.default.echo("没有找到任何记录"),b(a)}else o.default.echo(e[1].err)}))}else{b([{cmd:`git cherry-pick ${t.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}])}})),e.program.parse(process.argv);
