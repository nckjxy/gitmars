#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),i=require("shelljs"),{options:c,args:t}=require("./conf/copy"),{error:r,warning:s,queue:o,getStatus:a,getCurrent:n,isGitProject:g}=require("./js/index"),{createArgs:u}=require("./js/tools");g()||(i.echo(r("当前目录不是git项目目录")),i.exit(1)),e.name("gitm copy").usage("<from> [commitid...] [-k] [-a]").description("cherry-pick易用版本，从某个分支拷贝某条记录合并到当前分支"),t.length>0&&e.arguments(u(t)),c.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action(((e,c,t)=>{let r=a(),g=n();if(r||i.exit(1),""!==t.key||""!==t.author){let c=[`git checkout ${e}`,`git log --grep=${t.key} --author=${t.author}`];i.echo(s("为确保copy准确，请尽量完整填写关键词")),o(c).then((e=>{let c=[];if(0===e[1].code){let t=e[1].out.match(/(commit\s[a-z0-9]*\n+)/g)||[],r=[`git checkout ${g}`];t.forEach((e=>{c.push(e.replace(/(commit\s)|\n/g,""))})),c.reverse(),c.length>0?r=r.concat([{cmd:`git cherry-pick ${c.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):i.echo("没有找到任何记录"),o(r)}else i.echo(e[1].err)}))}else{let e=[{cmd:`git cherry-pick ${c.join(" ")}`,config:{slient:!1,again:!1,success:"记录合并成功",fail:"合并失败，请根据提示处理"}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}];o(e)}})),e.parse(process.argv);
