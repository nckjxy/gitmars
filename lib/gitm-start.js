#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),s=require("fs"),i=require("colors"),r=require("slash"),a=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=c(t),o=c(s),l=c(i),u=c(r);const f=[{required:!0,name:"type",variadic:!1,description:"分支类型"},{required:!0,name:"name",variadic:!1,description:"分支名称(不带feature/bugfix前缀)"}],g=[];function p(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,i,r,a,c=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:i||".",gitCommonDir:r,root:s,gitDir:a,gitHookDir:a+"/hooks",cdup:c}}const m={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function d(e,t="gitmars"){let s;if(!e){let{root:t}=p();try{e=t+"/gitmarsconfig.json",s=o.default.statSync(e)}catch(s){e=t}}const i={skipCI:!0},r=a.cosmiconfigSync(t);if(s||(s=o.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=r.search(e)||{};return Object.assign({},m,i,t,{filepath:s})}{const{config:t={},filepath:s=""}=r.load(e)||{};return Object.assign({},m,i,t,{filepath:s})}}function h(e){return l.default.yellow(e)}function b(e){return l.default.red(e)}function k(e){return l.default.green(e)}function x(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),x(e,t))})):t()}function $(e){return new Promise(((t,s)=>{let i=[];0===e.length&&s("指令名称不能为空"),x(e=JSON.parse(JSON.stringify(e)),((s,r)=>{let a={silent:!0,postmsg:!1,kill:!0,again:!1},c=s;s instanceof Object&&(a=Object.assign(a,s.config||{}),c=s.cmd),c?n.default.exec(c,a,((t,o,l)=>{let u=function(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{o=JSON.parse(o)}catch(l){o=o.replace(/\n*$/g,"")}if(i.push({code:t,out:o,err:l,cfg:a,cmd:c}),0!==t&&function(e){const{gitDir:t}=p();n.default.touch(t+"/.gitmarslog"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:s,code:t,out:o,err:l}),0!==t&&a.kill){let t=JSON.parse(JSON.stringify(e));a.again?!0!==a.again&&t.splice(0,1,a.again):t.shift(),r(!0),function(e){const{gitDir:t}=p();n.default.touch(t+"/.gitmarscommands"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),a.silent&&n.default.echo(b(l)),n.default.echo(b(a.fail||u.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),a.postmsg&&S("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&n.default.echo(b("请处理相关问题之后输入gitm continue继续")),n.default.exit(1)}else{if(0===t){let e=a.success||u.success;e&&(n.default.echo(k(e)),a.postmsg&&S(e))}else{let e=a.fail||u.fail||"指令 "+c+" 执行失败";e&&n.default.echo(h(e))}r()}})):t(i)}))}))}function y(){let e=function(e={}){const{silent:t=!0}=e,s=n.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let i=s?s.replace(/\n(\s+)/g,"\n").split("\n"):[],r={A:[],D:[],M:[],"??":[]};return 0===i.length||i.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1);r[s]||(r[s]=[]),r[s].push(t.join(" "))})),r}({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(n.default.echo(b("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),n.default.exit(1),!1):(e["??"].length>0&&n.default.echo(h("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function v(e){const{root:t}=p(),{appName:s}=function(e=process.cwd()){const t=n.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),i=d();let r="",a=new Date;switch(e){case"time":r=a;break;case"timeNum":r=a.getTime();break;case"pwd":r=t;break;case"project":r=s;break;case"user":r=i.user}return r}function S(e=""){const t=d();if(!t.msgTemplate)return void n.default.echo(b("请配置消息发送api模板地址"));let s=(i=t.msgTemplate,r=t=>"message"===t?e:v(t),i&&r?""+i.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof r)return r(t);for(let e in r)if(t===e)return r[e]})):null);var i,r;t.msgUrl&&function(e="",t={}){const s=d(),{silent:i=!0}=t;if(!s.msgUrl)return void n.default.echo(b("请配置消息推送地址"));e=e.replace(/\s/g,""),s.msgUrl&&n.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:i})}(s)}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(b("当前目录不是git项目目录")),n.default.exit(1));const w=d();e.program.name("gitm start").usage("<type> <name>").description("创建bugfix任务分支、创建feature功能开发分支、support框架支持分支"),f.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let s=e.name;e.variadic&&(s+="..."),s=e.required?"<"+s+">":"["+s+"]",t.push(s)})),t.join(" ")}(f)),g.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t)=>{const s=["bugfix","feature","support"];if(y()||n.default.exit(1),s.includes(e)){let s="bugfix"===e?w.bugfix:"support"===e?w.master:w.release;$(["git fetch",`git checkout ${s}`,"git pull",`git checkout -b ${e}/${t} ${s}`]).then((i=>{0===i[3].code&&n.default.echo(`${t}分支创建成功，该分支基于${s}创建，您当前已经切换到${e}/${t}\n如果需要提测，请执行${k("gitm combine "+e+" "+t)}\n开发完成后，记得执行: ${k("gitm end "+e+" "+t)}`)}))}else n.default.echo(b("type只允许输入："+JSON.stringify(s))),n.default.exit(1)})),e.program.parse(process.argv);
