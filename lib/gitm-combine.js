#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),i=require("shelljs"),{options:t,args:s}=require("./conf/combine"),{error:c,queue:a,getStatus:g,getCurrent:n,searchBranch:o,isGitProject:r}=require("./js/index"),{createArgs:u}=require("./js/tools"),{defaults:l}=require("./js/global");r()||(i.echo(c("当前目录不是git项目目录")),i.exit(1));const{getUserToken:$}=require("./js/api"),f=require("./js/getGitConfig"),p=require("./js/getConfig"),{appName:m}=f(),d=p();e.name("gitm combine").usage("[type] [name] [-d --dev] [-p --prod]").description("合并bugfix任务分支、合并feature功能开发分支、合并support分支"),s.length>0&&e.arguments(u(s)),t.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action((async(e,t,s)=>{const r=["bugfix","feature","support"],u=[l.master,l.develop,l.release,l.bugfix,l.support],{token:f,level:p,nickname:h=""}=d.api?$():{};let b=!(!s.add&&""===s.commit)||g();if(s.dev||s.prod||(i.echo("请输入需要同步到的环境"),i.exit(1)),b||i.exit(1),!0===s.commit&&(i.echo(c("请输入要提交的message")),i.exit(1)),e){if(!t){r.includes(e)&&(i.echo("请输入分支名称"),i.exit(1));let s=await o(e);1===s.length?[e,t]=s[0].split("/"):(i.echo(s.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:c("分支不存在，请正确输入")),i.exit(1))}}else[e,t]=n().split("/"),t||(u.includes(e)&&i.echo(c(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),i.exit(1));if(r.includes(e)&&t){let i="bugfix"===e?d.bugfix:d.release,c=[];s.add&&(c=c.concat(["git add ."])),s.commit&&(c=c.concat([`git commit -m "${s.commit}"`])),s.dev&&(c=c.concat(["git fetch",`git checkout ${d.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${d.develop}成功`,fail:`${e}/${t}合并到${d.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]),s.build&&(c=c.concat([{cmd:`gitm build ${m} --env dev --app ${!0===s.build?"all":s.build}`,config:{slient:!0,again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),s.prod&&(s.noBugfix||s.asFeature||(c=c.concat(!p||p<3?["git fetch",`git checkout ${i}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${i}成功`,fail:`${e}/${t}合并到${i}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${i}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${i}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${i}分支的merge请求"`])),"bugfix"===e&&s.asFeature&&(c=c.concat(!p||p<3?["git fetch",`git checkout ${d.release}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${d.release}成功`,fail:`${e}/${t}合并到${d.release}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${d.release}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${d.release}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${d.release}分支的merge请求"`])),"support"===e&&s.bugfix&&(c=c.concat(!p||p<3?["git fetch",`git checkout ${d.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${d.bugfix}成功`,fail:`${e}/${t}合并到${d.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${d.bugfix}\\",\\"private_token\\":\\"${f}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${d.bugfix}'\\"}" "${d.gitHost}/api/v4/projects/${d.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${h}在${m}项目提交了${e}/${t}分支合并到${d.bugfix}分支的merge请求"`])),s.build&&(!p||p<3)&&("bugfix"===e&&(c=c.concat([{cmd:`gitm build ${m} --env bug --app ${!0===s.build?"all":s.build}`,config:{slient:!0,again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"support"===e&&s.bugfix&&(c=c.concat([{cmd:`gitm build ${m} --env bug --app ${!0===s.build?"all":s.build}`,config:{slient:!0,again:!1,success:"调起构建成功",fail:"调起构建失败"}}])))),a(c)}else i.echo(c("type只允许输入："+JSON.stringify(r))),i.exit(1)})),e.parse(process.argv);
