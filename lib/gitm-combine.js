#!/usr/bin/env node
const program=require("commander");const sh=require("shelljs");const{options,args}=require("./conf/combine");const{error,queue,getStatus,getCurrent,searchBranch}=require("./js/index");const{createArgs}=require("./js/tools");const{defaults}=require("./js/global");const{getUserToken}=require("./js/api");const{appName}=require("./js/getGitConfig")();const config=require("./js/getConfig")();program.name("gitm combine").usage("[type] [name] [-d --dev] [-p --prod]").description("合并bugfix任务分支、合并feature功能开发分支、合并support分支");if(args.length>0)program.arguments(createArgs(args));options.forEach(o=>{program.option(o.flags,o.description,o.defaultValue)});program.action(async(type,name,opt)=>{const allow=["bugfix","feature","support"];const deny=[defaults.master,defaults.develop,defaults.release,defaults.bugfix,defaults.support];const{token,level}=config.api?getUserToken():{};let status=!opt.add&&opt.commit===""?getStatus():true;if(!opt.dev&&!opt.prod){sh.echo("请输入需要同步到的环境");sh.exit(1)}if(!status)sh.exit(1);if(opt.commit===true){sh.echo(error(`\u8BF7\u8F93\u5165\u8981\u63D0\u4EA4\u7684message`));sh.exit(1)}if(!type){[type,name]=getCurrent().split("/");if(!name){deny.includes(type)&&sh.echo(error(`\u9A9A\u5E74\uFF0C\u4F60\u5728${type}\u5206\u652F\u6267\u884C\u8FD9\u4E2A\u6307\u4EE4\u662F\u4EC0\u4E48\u9A9A\u64CD\u4F5C\uFF1F`));sh.exit(1)}}else if(!name){if(allow.includes(type)){sh.echo("请输入分支名称");sh.exit(1)}let branchs=await searchBranch(type);if(branchs.length===1){[type,name]=branchs[0].split("/")}else{sh.echo(branchs.length>1?`\u67E5\u8BE2\u5230\u591A\u6761\u540D\u79F0\u5305\u542B${type}\u7684\u5206\u652F\uFF0C\u8BF7\u8F93\u5165\u5206\u652F\u7C7B\u578B`:error("分支不存在，请正确输入"));sh.exit(1)}}if(allow.includes(type)&&name){let base=type==="bugfix"?config.bugfix:config.release,cmd=[];if(opt.add){cmd=cmd.concat([`git add .`])}if(opt.commit){cmd=cmd.concat([`git commit -m "${opt.commit}"`])}if(opt.dev){cmd=cmd.concat([`git fetch`,`git checkout ${config.develop}`,`git pull`,{cmd:`git merge --no-ff ${type}/${name}`,config:{slient:false,again:false,success:`${type}/${name}\u5408\u5E76\u5230${config.develop}\u6210\u529F`,fail:`${type}/${name}\u5408\u5E76\u5230${config.develop}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${type}/${name}`]);if(opt.build){cmd=cmd.concat([{cmd:`gitm build ${appName} --env dev --app ${opt.build===true?"all":opt.build}`,config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}}if(opt.prod){if(!opt.noBugfix&&!opt.asFeature){cmd=cmd.concat(!level||level<3?[`git fetch`,`git checkout ${base}`,`git pull`,{cmd:`git merge --no-ff ${type}/${name}`,config:{slient:false,again:false,success:`${type}/${name}\u5408\u5E76\u5230${base}\u6210\u529F`,fail:`${type}/${name}\u5408\u5E76\u5230${base}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${type}/${name}`]:[{cmd:`git push --set-upstream origin ${type}/${name}`,config:{slient:false,again:true,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${type}/${name}\\",\\"target_branch\\":\\"${base}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${type}/${name}' into '${base}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}])}if(type==="bugfix"&&opt.asFeature){cmd=cmd.concat(!level||level<3?[`git fetch`,`git checkout ${config.release}`,`git pull`,{cmd:`git merge --no-ff ${type}/${name}`,config:{slient:false,again:false,success:`${type}/${name}\u5408\u5E76\u5230${config.release}\u6210\u529F`,fail:`${type}/${name}\u5408\u5E76\u5230${config.release}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${type}/${name}`]:[{cmd:`git push --set-upstream origin ${type}/${name}`,config:{slient:false,again:true,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${type}/${name}\\",\\"target_branch\\":\\"${config.release}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${type}/${name}' into '${config.release}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}])}if(type==="support"&&opt.bugfix){cmd=cmd.concat(!level||level<3?[`git fetch`,`git checkout ${config.bugfix}`,`git pull`,{cmd:`git merge --no-ff ${type}/${name}`,config:{slient:false,again:false,success:`${type}/${name}\u5408\u5E76\u5230${config.bugfix}\u6210\u529F`,fail:`${type}/${name}\u5408\u5E76\u5230${config.bugfix}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${type}/${name}`]:[{cmd:`git push --set-upstream origin ${type}/${name}`,config:{slient:false,again:true,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${type}/${name}\\",\\"target_branch\\":\\"${config.bugfix}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${type}/${name}' into '${config.bugfix}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}])}if(opt.build&&(!level||level<3)){if(type==="bugfix"){cmd=cmd.concat([{cmd:`gitm build ${appName} --env bug --app ${opt.build===true?"all":opt.build}`,config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}if(type==="support"&&opt.bugfix){cmd=cmd.concat([{cmd:`gitm build ${appName} --env bug --app ${opt.build===true?"all":opt.build}`,config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}}}queue(cmd)}else{sh.echo(error("type只允许输入："+JSON.stringify(allow)));sh.exit(1)}});program.parse(process.argv);