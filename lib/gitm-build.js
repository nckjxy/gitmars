#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("fs"),r=require("colors"),i=require("shelljs"),o=require("path"),a=require("slash"),n=require("cosmiconfig");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=l(t),u=l(r),p=l(i),c=l(o),f=l(a);const d=[{required:!0,name:"project",variadic:!1,description:"项目名称"}],g=[{flags:"-e, --env [env]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-e",long:"--env",negate:!1,description:"构建环境，可选dev、prod、bug、all",defaultValue:"dev",recommend:!0},{flags:"-a, --app [app]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-a",long:"--app",negate:!1,description:"构建应用",defaultValue:"all",recommend:!0}];const m={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function h(e,t="gitmars"){let r;if(!e){let{root:t}=function(e=process.cwd()){const t=p.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[r,i,o,a,n=""]=t.split("\n").map((e=>e.trim())).map(f.default);return{prefix:i||".",gitCommonDir:o,root:r,gitDir:a,gitHookDir:a+"/hooks",cdup:n}}();try{e=t+"/gitmarsconfig.json",r=s.default.statSync(e)}catch(r){e=t}}const i={skipCI:!0},o=n.cosmiconfigSync(t);if(r||(r=s.default.statSync(e)),r.isDirectory()){const{config:t={},filepath:r=""}=o.search(e)||{};return Object.assign({},m,i,t,{filepath:r})}{const{config:t={},filepath:r=""}=o.load(e)||{};return Object.assign({},m,i,t,{filepath:r})}}function v(e){return u.default.red(e)}function j(e,t){return new Promise(((r,i)=>{s.default.writeFile(e,t,(e=>{e?i(new Error("文件写入错误")):r(!0)}))}))}let q=require("node-apollo"),w=require("shelljs");const y=c.default.join(__dirname,"../../cache");async function b({env:e,project:t,app:r="all"}){let i,o,a=await async function(){let e,t,r,i=(new Date).getTime();if(w.test("-f",y+"/buildConfig.json")&&i-parseInt(w.cat(y+"/buildConfig.txt").stdout)<864e5)return require(y+"/buildConfig.json");if(e=h(),!e.apolloConfig)return w.echo(v("请配置apollo")),void w.exit(0);if("string"==typeof e.apolloConfig)try{t=JSON.parse(e.apolloConfig)}catch{return}else t=e.apolloConfig;return r=await q.remoteConfigService(t),await j(y+"/buildConfig.txt",String(i)),await j(y+"/buildConfig.json",JSON.stringify(r.content)),r.content}(),n=a[e];return n?(i=n.list.find((e=>e.name===t)),i?r&&i.apps&&!i.apps.includes(r)?(p.default.echo(v("请输入正确的应用名称")),void p.default.exit(1)):a.template?(l=i.apps&&i.apps.length>0?a.templateWithParam:a.template,s={line:n.line,project:i.project,token:n.token,app:r},o=l&&s?""+l.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof s)return s(t);for(let e in s)if(t===e)return s[e]})):null,p.default.exec(`curl -u ${a.username}:${a.password} "${o}"`,{silent:!0}),void p.default.echo((c="成功调起Jenkins构建",u.default.green(c)))):(p.default.echo(v("请配置Jenkins构建地址模板")),void p.default.exit(1)):(p.default.echo(v("请输入正确的项目名称")),void p.default.exit(1))):(p.default.echo(v("请输入正确的环境名称")),void p.default.exit(1));var l,s,c}e.program.name("gitm build").usage("<project>").description("构建Jenkins"),d.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let r=e.name;e.variadic&&(r+="..."),r=e.required?"<"+r+">":"["+r+"]",t.push(r)})),t.join(" ")}(d)),g.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t)=>{b({env:t.env,project:e,app:t.app})})),e.program.parse(process.argv);
