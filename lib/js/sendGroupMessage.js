"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("shelljs"),e=require("path"),i=require("fs"),o=require("colors"),r=require("slash"),n=require("cosmiconfig");function a(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var s=a(t),l=a(e),c=a(i),u=a(o),f=a(r);const p={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function g(t,e="gitmars"){let i;if(!t){let{root:e}=function(t=process.cwd()){const e=s.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i,o,r,n,a=""]=e.split("\n").map((t=>t.trim())).map(f.default);return{prefix:o||".",gitCommonDir:r,root:i,gitDir:n,gitHookDir:n+"/hooks",cdup:a}}();try{t=e+"/gitmarsconfig.json",i=c.default.statSync(t)}catch(i){t=e}}const o={skipCI:!0},r=n.cosmiconfigSync(e);if(i||(i=c.default.statSync(t)),i.isDirectory()){const{config:e={},filepath:i=""}=r.search(t)||{};return Object.assign({},p,o,e,{filepath:i})}{const{config:e={},filepath:i=""}=r.load(t)||{};return Object.assign({},p,o,e,{filepath:i})}}function d(t){return u.default.red(t)}function m(t,e){return new Promise(((i,o)=>{c.default.writeFile(t,e,(t=>{t?o(new Error("文件写入错误")):i(!0)}))}))}let h=require("node-apollo"),y=require("shelljs");const C=l.default.join(__dirname,"../../cache");exports.default=async function(t,e={}){const i=await async function(){let t,e,i,o=(new Date).getTime();if(y.test("-f",C+"/buildConfig.json")&&o-parseInt(y.cat(C+"/buildConfig.txt").stdout)<864e5)return require(C+"/buildConfig.json");if(t=g(),!t.apolloConfig)return y.echo(d("请配置apollo")),void y.exit(0);if("string"==typeof t.apolloConfig)try{e=JSON.parse(t.apolloConfig)}catch{return}else e=t.apolloConfig;return i=await h.remoteConfigService(e),await m(C+"/buildConfig.txt",String(o)),await m(C+"/buildConfig.json",JSON.stringify(i.content)),i.content}(),{silent:o=!0,url:r}=e;let n=[];i.gitNotificationGroupUrl||r?(r?n=[r]:i.gitNotificationGroupUrl&&(n="string"==typeof i.gitNotificationGroupUrl?[i.gitNotificationGroupUrl]:i.gitNotificationGroupUrl),t=t.replace(/\s/g,""),n.forEach((()=>{s.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d "{\\"content\\":\\"${t}\\"}" "${r||i.gitNotificationGroupUrl}"`,{silent:o})}))):s.default.echo(d("没有配置群消息推送地址"))};
