"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),t=require("shelljs"),s=require("colors"),r=require("slash"),a=require("cosmiconfig");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var c=n(e),i=n(t),o=n(s),l=n(r);function u(e=process.cwd()){const t=i.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,r,a,n,c=""]=t.split("\n").map((e=>e.trim())).map(l.default);return{prefix:r||".",gitCommonDir:a,root:s,gitDir:n,gitHookDir:n+"/hooks",cdup:c}}const g={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function f(e,t="gitmars"){let s;if(!e){let{root:t}=u();try{e=t+"/gitmarsconfig.json",s=c.default.statSync(e)}catch(s){e=t}}const r={skipCI:!0},n=a.cosmiconfigSync(t);if(s||(s=c.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=n.search(e)||{};return Object.assign({},g,r,t,{filepath:s})}{const{config:t={},filepath:s=""}=n.load(e)||{};return Object.assign({},g,r,t,{filepath:s})}}function p(e){return o.default.yellow(e)}function d(e){return o.default.red(e)}function m(e){return o.default.green(e)}function h(e,t){return new Promise(((s,r)=>{c.default.writeFile(e,t,(e=>{e?r(new Error("文件写入错误")):s(!0)}))}))}function x(e,t){if(!e||!t)return null;return""+e.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,s)=>{if("function"==typeof t)return t(s);for(let e in t)if(s===e)return t[e]}))}function b(e){const t=String(e).match(/^(\d+)([a-zA-Z]+)$/);let s;if(!t)return null;switch(s=+t[1],t[2]){case"m":s*=60;break;case"h":s*=3600;break;case"d":s*=86400;break;case"w":s*=604800;break;case"M":s*=2592e3;break;case"y":s*=31536e3}return parseInt(String(Date.now()/1e3-s))}function k(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),k(e,t))})):t()}function $(e){return new Promise(((t,s)=>{let r=[];0===e.length&&s("指令名称不能为空"),k(e=JSON.parse(JSON.stringify(e)),((s,a)=>{let n={silent:!0,postmsg:!1,kill:!0,again:!1},c=s;s instanceof Object&&(n=Object.assign(n,s.config||{}),c=s.cmd),c?i.default.exec(c,n,((t,o,l)=>{let u=T(c);try{o=JSON.parse(o)}catch(l){o=o.replace(/\n*$/g,"")}if(r.push({code:t,out:o,err:l,cfg:n,cmd:c}),0!==t&&S({command:s,code:t,out:o,err:l}),0!==t&&n.kill){let t=JSON.parse(JSON.stringify(e));n.again?!0!==n.again&&t.splice(0,1,n.again):t.shift(),a(!0),y(t),n.silent&&i.default.echo(d(l)),i.default.echo(d(n.fail||u.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),n.postmsg&&q("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&i.default.echo(d("请处理相关问题之后输入gitm continue继续")),i.default.exit(1)}else{if(0===t){let e=n.success||u.success;e&&(i.default.echo(m(e)),n.postmsg&&q(e))}else{let e=n.fail||u.fail||"指令 "+c+" 执行失败";e&&i.default.echo(p(e))}a()}})):t(r)}))}))}function w(){const{gitDir:e}=u();let t=[];return i.default.test("-f",e+"/.gitmarscommands")&&(t=i.default.cat(e+"/.gitmarscommands").stdout.split("\n")[0].replace(/(^\n*)|(\n*$)/g,"").replace(/\n{2,}/g,"\n").replace(/\r/g,""),t=JSON.parse(decodeURIComponent(t))),t}function y(e){const{gitDir:t}=u();i.default.touch(t+"/.gitmarscommands"),i.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}function S(e){const{gitDir:t}=u();i.default.touch(t+"/.gitmarslog"),i.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}function j(e={}){const{silent:t=!0}=e,s=i.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let r=s?s.replace(/\n(\s+)/g,"\n").split("\n"):[],a={A:[],D:[],M:[],"??":[]};return 0===r.length||r.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1);a[s]||(a[s]=[]),a[s].push(t.join(" "))})),a}function D(){let e=j({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(i.default.echo(d("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),i.default.exit(1),!1):(e["??"].length>0&&i.default.echo(p("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function O(e={}){const{lastet:t,limit:s,branches:r}=e,a=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"],n=i.default.exec(`git log${s?' -"'+s+'"':""}${t?' --since="'+b(t)+'"':""}${r?' --branches="*'+r+'"':""} --date-order --pretty=format:"${a.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let c=[];return n&&n.split("-end-").forEach((e=>{let t=e.split(",="),s={};a.forEach(((e,r)=>{s[e]=t[r]})),c.push(s)})),c}const v=async e=>(await $([`gitm branch -k ${e}`]))[0].out.replace(/^\s+/,"");function C(){return i.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"")}async function I(e,t,s=!1){const r=(await $([`gitm branch${e?" -k "+e:""}${t?" -t "+t:""}${s?" -r":""}`]))[0].out.replace(/^\*\s+/,"");let a=r?r.split("\n"):[];return a=a.map((e=>e.trim())),a}function M(e={}){let{path:t,key:s,type:r,remote:a=!1}=e;t||(t=i.default.pwd().stdout);const n=i.default.exec(`git ls-remote${a?" --refs":" --heads"} --quiet --sort="version:refname" ${t}`,{silent:!0}).stdout.replace(/\n*$/g,"");let c=n?n.split("\n"):[],o={heads:[],tags:[],others:[]};for(let e of c){let t=e.match(/^\w+[\s]+refs\/(heads|remotes|tags)\/([\w-\/]+)$/);if(t)switch(t[1]){case"heads":case"remotes":o.heads.push(t[2]);break;case"tags":o.tags.push(t[2]);break;default:o.others.push(t[2])}}return r&&["bugfix","feature","support"].includes(r)&&(o.heads=o.heads.filter((e=>e.indexOf("/"+r+"/")>-1))),s&&(o.heads=o.heads.filter((e=>e.indexOf(s)>-1))),o.heads}function N(e,t=[],s=!1){"string"==typeof t&&(t=t.split(","));const r=i.default.exec("git branch"+(s?" -a":""),{silent:!0}).stdout.replace(/(^\s+|[\n\r]*$)/g,"").replace(/\*\s+/,"");let a=r?r.replace(/\n(\s+)/g,"\n").split("\n"):[];return a=a.filter((s=>{let r=!0;if(e&&!s.includes(e)&&(r=!1),r&&t.length>0){r=!1;e:for(const e of t)if(s.includes(e)){r=!0;break e}}return r})),a}async function U(e){const t=(await $(["git stash list"]))[0].out.replace(/^\*\s+/,"");let s=t&&t.split("\n")||[],r=[];s.length>10&&i.default.echo(p(`该项目下一共有${s.length}条暂存记录，建议定期清理！`));try{s.forEach((t=>{let s=t.split(":"),a=s.shift();if(!e||e&&e===s[s.length-1].trim()){let e=a.match(/^stash@\{(\d+)\}$/);s.length>1&&s.shift(),r.push({key:a,index:+e[1],msg:s.join(":").trim()})}}))}catch(e){}return r}function B(e){const{root:t}=u(),{appName:s}=function(e=process.cwd()){const t=i.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(l.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),r=f();let a="",n=new Date;switch(e){case"time":a=n;break;case"timeNum":a=n.getTime();break;case"pwd":a=t;break;case"project":a=s;break;case"user":a=r.user}return a}function q(e=""){const t=f();if(!t.msgTemplate)return void i.default.echo(d("请配置消息发送api模板地址"));let s=x(t.msgTemplate,(t=>"message"===t?e:B(t)));t.msgUrl&&F(s)}function F(e="",t={}){const s=f(),{silent:r=!0}=t;s.msgUrl?(e=e.replace(/\s/g,""),s.msgUrl&&i.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:r})):i.default.echo(d("请配置消息推送地址"))}function T(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}function E(e,t){if(null===e)return null;e+=".",t+=".";let s=parseFloat(e),r=parseFloat(t),a=parseFloat(e.replace(s+".",""))||0,n=parseFloat(t.replace(r+".",""))||0;return!(r>s)&&(r<s||a>=n)}function J(e,t=!1){const s=i.default.exec(`git branch ${t?"-r":""} --contains ${e} --format="%(refname:short)`,{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");return s?s.split("\n"):[]}function L(){return i.default.exec("git config user.name",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")}function P(){return i.default.exec("git config user.email",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")}function A(){return i.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")}var G={warning:p,error:d,success:m,writeFile:h,mapTemplate:x,getSeconds:b,wait:k,queue:$,getCache:w,setCache:y,setLog:S,getStatusInfo:j,getStatus:D,getLogs:O,checkBranch:v,getCurrent:C,searchBranch:I,searchBranchs:M,filterBranch:N,getStashList:U,postMessage:q,sendMessage:F,getCommandMessage:T,compareVersion:E,getBranchsFromID:J,getGitUser:L,getGitEmail:P,isGitProject:A};exports.checkBranch=v,exports.compareVersion=E,exports.default=G,exports.error=d,exports.filterBranch=N,exports.getBranchsFromID=J,exports.getCache=w,exports.getCommandMessage=T,exports.getCurrent=C,exports.getGitEmail=P,exports.getGitUser=L,exports.getLogs=O,exports.getMessage=B,exports.getSeconds=b,exports.getStashList=U,exports.getStatus=D,exports.getStatusInfo=j,exports.isGitProject=A,exports.mapTemplate=x,exports.postMessage=q,exports.queue=$,exports.searchBranch=I,exports.searchBranchs=M,exports.sendMessage=F,exports.setCache=y,exports.setLog=S,exports.success=m,exports.wait=k,exports.warning=p,exports.writeFile=h;
