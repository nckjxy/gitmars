"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("fs"),t=require("shelljs"),s=require("colors"),r=require("./getGitConfig"),n=require("./gitRevParse"),a=require("./getConfig");function c(e){return s.yellow(e)}function i(e){return s.red(e)}function o(e){return s.green(e)}function l(t,s){return new Promise(((r,n)=>{e.writeFile(t,s,(e=>{e?n(new Error("文件写入错误")):r(!0)}))}))}function u(e,t){if(!e||!t)return null;return""+e.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,s)=>{if("function"==typeof t)return t(s);for(let e in t)if(s===e)return t[e]}))}function g(e){const t=String(e).match(/^(\d+)([a-zA-Z]+)$/);let s;if(!t)return null;switch(s=+t[1],t[2]){case"m":s*=60;break;case"h":s*=3600;break;case"d":s*=86400;break;case"w":s*=604800;break;case"M":s*=2592e3;break;case"y":s*=31536e3}return parseInt(String(Date.now()/1e3-s))}function p(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),p(e,t))})):t()}function f(e){return new Promise(((s,r)=>{let n=[];0===e.length&&r("指令名称不能为空"),p(e=JSON.parse(JSON.stringify(e)),((r,a)=>{let l={silent:!0,postmsg:!1,kill:!0,again:!1},u=r;r instanceof Object&&(l=Object.assign(l,r.config||{}),u=r.cmd),u?t.exec(u,l,((s,g,p)=>{let f=q(u);try{g=JSON.parse(g)}catch(p){g=g.replace(/\n*$/g,"")}if(n.push({code:s,out:g,err:p,cfg:l,cmd:u}),0!==s&&d({command:r,code:s,out:g,err:p}),0!==s&&l.kill){let s=JSON.parse(JSON.stringify(e));l.again?!0!==l.again&&s.splice(0,1,l.again):s.shift(),a(!0),m(s),l.silent&&t.echo(i(p)),t.echo(i(l.fail||f.fail||"出错了！指令 "+u+" 执行失败，中断了进程")),l.postmsg&&D("出错了！指令 "+u+" 执行失败，中断了进程"),s.length>0&&t.echo(i("请处理相关问题之后输入gitm continue继续")),t.exit(1)}else{if(0===s){let e=l.success||f.success;e&&(t.echo(o(e)),l.postmsg&&D(e))}else{let e=l.fail||f.fail||"指令 "+u+" 执行失败";e&&t.echo(c(e))}a()}})):s(n)}))}))}function h(){const{gitDir:e}=n();let s=[];return t.test("-f",e+"/.gitmarscommands")&&(s=t.cat(e+"/.gitmarscommands").stdout.split("\n")[0].replace(/(^\n*)|(\n*$)/g,"").replace(/\n{2,}/g,"\n").replace(/\r/g,""),s=JSON.parse(decodeURIComponent(s))),s}function m(e){const{gitDir:s}=n();t.touch(s+"/.gitmarscommands"),t.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),s+"/.gitmarscommands")}function d(e){const{gitDir:s}=n();t.touch(s+"/.gitmarslog"),t.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),s+"/.gitmarslog")}function x(e={}){const{silent:s=!0}=e,r=t.exec("git status -s --no-column",{silent:s}).stdout.replace(/(^\s+|\n*$)/g,"");let n=r?r.replace(/\n(\s+)/g,"\n").split("\n"):[],a={A:[],D:[],M:[],"??":[]};return 0===n.length||n.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1);a[s]||(a[s]=[]),a[s].push(t.join(" "))})),a}function b(){let e=x({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(t.echo(i("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),t.exit(1),!1):(e["??"].length>0&&t.echo(c("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function k(e={}){const{lastet:s,limit:r,branches:n}=e,a=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"],c=t.exec(`git log${r?' -"'+r+'"':""}${s?' --since="'+g(s)+'"':""}${n?' --branches="*'+n+'"':""} --date-order --pretty=format:"${a.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let i=[];return c&&c.split("-end-").forEach((e=>{let t=e.split(",="),s={};a.forEach(((e,r)=>{s[e]=t[r]})),i.push(s)})),i}const $=async e=>(await f([`gitm branch -k ${e}`]))[0].out.replace(/^\s+/,"");function w(){return t.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"")}async function S(e,t,s=!1){const r=(await f([`gitm branch${e?" -k "+e:""}${t?" -t "+t:""}${s?" -r":""}`]))[0].out.replace(/^\*\s+/,"");let n=r?r.split("\n"):[];return n=n.map((e=>e.trim())),n}function y(e={}){let{path:s,key:r,type:n,remote:a=!1}=e;s||(s=t.pwd().stdout);const c=t.exec(`git ls-remote${a?" --refs":" --heads"} --quiet --sort="version:refname" ${s}`,{silent:!0}).stdout.replace(/\n*$/g,"");let i=c?c.split("\n"):[],o={heads:[],tags:[],others:[]};for(let e of i){let t=e.match(/^\w+[\s]+refs\/(heads|remotes|tags)\/([\w-\/]+)$/);if(t)switch(t[1]){case"heads":case"remotes":o.heads.push(t[2]);break;case"tags":o.tags.push(t[2]);break;default:o.others.push(t[2])}}return n&&["bugfix","feature","support"].includes(n)&&(o.heads=o.heads.filter((e=>e.indexOf("/"+n+"/")>-1))),r&&(o.heads=o.heads.filter((e=>e.indexOf(r)>-1))),o.heads}function C(e,s=[],r=!1){"string"==typeof s&&(s=s.split(","));const n=t.exec("git branch"+(r?" -a":""),{silent:!0}).stdout.replace(/(^\s+|[\n\r]*$)/g,"").replace(/\*\s+/,"");let a=n?n.replace(/\n(\s+)/g,"\n").split("\n"):[];return a=a.filter((t=>{let r=!0;if(e&&!t.includes(e)&&(r=!1),r&&s.length>0){r=!1;e:for(const e of s)if(t.includes(e)){r=!0;break e}}return r})),a}async function O(e){const s=(await f(["git stash list"]))[0].out.replace(/^\*\s+/,"");let r=s&&s.split("\n")||[],n=[];r.length>10&&t.echo(c(`该项目下一共有${r.length}条暂存记录，建议定期清理！`));try{r.forEach((t=>{let s=t.split(":"),r=s.shift();if(!e||e&&e===s[s.length-1].trim()){let e=r.match(/^stash@\{(\d+)\}$/);s.length>1&&s.shift(),n.push({key:r,index:+e[1],msg:s.join(":").trim()})}}))}catch(e){}return n}function j(e){const{root:t}=n(),{appName:s}=r(),c=a();let i="",o=new Date;switch(e){case"time":i=o;break;case"timeNum":i=o.getTime();break;case"pwd":i=t;break;case"project":i=s;break;case"user":i=c.user}return i}function D(e=""){const s=a();if(!s.msgTemplate)return void t.echo(i("请配置消息发送api模板地址"));let r=u(s.msgTemplate,(t=>"message"===t?e:j(t)));s.msgUrl&&M(r)}function M(e="",s={}){const r=a(),{silent:n=!0}=s;r.msgUrl?(e=e.replace(/\s/g,""),r.msgUrl&&t.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${r.msgUrl}"`,{silent:n})):t.echo(i("请配置消息推送地址"))}function q(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}function v(e,t){if(null===e)return null;e+=".",t+=".";let s=parseFloat(e),r=parseFloat(t),n=parseFloat(e.replace(s+".",""))||0,a=parseFloat(t.replace(r+".",""))||0;return!(r>s)&&(r<s||n>=a)}function B(e,s=!1){const r=t.exec(`git branch ${s?"-r":""} --contains ${e} --format="%(refname:short)`,{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");return r?r.split("\n"):[]}function I(){return t.exec("git config user.name",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")}function N(){return t.exec("git config user.email",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"")}function F(){return t.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")}var P={warning:c,error:i,success:o,writeFile:l,mapTemplate:u,getSeconds:g,wait:p,queue:f,getCache:h,setCache:m,setLog:d,getStatusInfo:x,getStatus:b,getLogs:k,checkBranch:$,getCurrent:w,searchBranch:S,searchBranchs:y,filterBranch:C,getStashList:O,postMessage:D,sendMessage:M,getCommandMessage:q,compareVersion:v,getBranchsFromID:B,getGitUser:I,getGitEmail:N,isGitProject:F};exports.checkBranch=$,exports.compareVersion=v,exports.default=P,exports.error=i,exports.filterBranch=C,exports.getBranchsFromID=B,exports.getCache=h,exports.getCommandMessage=q,exports.getCurrent=w,exports.getGitEmail=N,exports.getGitUser=I,exports.getLogs=k,exports.getMessage=j,exports.getSeconds=g,exports.getStashList=O,exports.getStatus=b,exports.getStatusInfo=x,exports.isGitProject=F,exports.mapTemplate=u,exports.postMessage=D,exports.queue=f,exports.searchBranch=S,exports.searchBranchs=y,exports.sendMessage=M,exports.setCache=m,exports.setLog=d,exports.success=o,exports.wait=p,exports.warning=c,exports.writeFile=l;
