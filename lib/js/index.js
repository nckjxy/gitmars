const fs=require("fs");const sh=require("shelljs");const colors=require("colors");const getGitConfig=require("./getGitConfig");const gitRevParse=require("./gitRevParse");const getConfig=require("./getConfig");function warning(txt){return colors.yellow(txt)}function error(txt){return colors.red(txt)}function success(txt){return colors.green(txt)}function writeFile(url,data){return new Promise((resolve,reject)=>{fs.writeFile(url,data,err=>{if(err){reject(new Error("文件写入错误"))}else{resolve()}})})}function mapTemplate(tmp,data){if(!tmp||!data)return null;let str=""+tmp.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,(a,b)=>{if(typeof data==="function"){return data(b)}for(let k in data){if(b===k){return data[k]}}});return str}function getSeconds(str){let match=String(str).match(/^(\d+)([a-zA-Z]+)$/),time;if(!match)return null;time=+match[1];switch(match[2]){case"m":time*=60;break;case"h":time*=3600;break;case"d":time*=86400;break;case"w":time*=604800;break;case"M":time*=2592e3;break;case"y":time*=31536e3;break;default:break}return parseInt(Date.now()/1e3-time)}function wait(list,fun){if(list.length===0){fun();return}else{fun(list[0],(kill=false)=>{if(kill)return;list.shift();wait(list,fun)})}}function queue(list){return new Promise((resolve,reject)=>{let returns=[];if(list.length===0)reject("指令名称不能为空");list=JSON.parse(JSON.stringify(list));wait(list,(command,cb)=>{let cfg={silent:true,postmsg:false,kill:true,again:false},cmd=command;if(command instanceof Object){cfg=Object.assign(cfg,command.config||{});cmd=command.cmd}if(!cmd){resolve(returns)}else{sh.exec(cmd,cfg,(code,out,err)=>{let msg=getCommandMessage(cmd);try{out=JSON.parse(out)}catch(err2){out=out.replace(/\n*$/g,"")}returns.push({code:code,out:out,err:err,cfg:cfg,cmd:cmd});if(code!==0)setLog({command:command,code:code,out:out,err:err});if(code!==0&&cfg.kill){let rest=JSON.parse(JSON.stringify(list));if(!cfg.again){rest.shift()}else if(cfg.again!==true){rest.splice(0,1,cfg.again)}cb(true);setCache(rest);cfg.silent&&sh.echo(error(err));sh.echo(error(cfg.fail||msg.fail||"出错了！指令 "+cmd+" 执行失败，中断了进程"));cfg.postmsg&&postMessage("出错了！指令 "+cmd+" 执行失败，中断了进程");rest.length>0&&sh.echo(error("请处理相关问题之后输入gitm continue继续"));sh.exit(1)}else{if(code===0){let m=cfg.success||msg.success;if(m){sh.echo(success(m));cfg.postmsg&&postMessage(m)}}else{let m=cfg.fail||msg.fail||"指令 "+cmd+" 执行失败";m&&sh.echo(warning(m))}cb()}})}})})}function getCache(){const{gitDir}=gitRevParse();let arr=[];if(sh.test("-f",gitDir+"/.gitmarscommands")){arr=sh.cat(gitDir+"/.gitmarscommands").stdout.split("\n")[0].replace(/(^\n*)|(\n*$)/g,"").replace(/\n{2,}/g,"\n").replace(/\r/g,"");arr=JSON.parse(decodeURIComponent(arr))}return arr}function setCache(rest){const{gitDir}=gitRevParse();sh.touch(gitDir+"/.gitmarscommands");sh.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(rest)),gitDir+"/.gitmarscommands")}function setLog(log){const{gitDir}=gitRevParse();sh.touch(gitDir+"/.gitmarslog");sh.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(log)),gitDir+"/.gitmarslog")}const getStatusInfo=(config={})=>{const{silent=true}=config;const out=sh.exec("git status -s --no-column",{silent:silent}).stdout.replace(/(^\s+|\n*$)/g,"");let list=out?out.replace(/\n(\s+)/g,"\n").split("\n"):[],sum={A:[],D:[],M:[],"??":[]};if(list.length===0)return sum;list.forEach(str=>{let arr=str.trim().replace(/\s+/g," ").split(" "),type=arr.splice(0,1);if(!sum[type])sum[type]=[];sum[type].push(arr.join(" "))});return sum};function getStatus(){let sum=getStatusInfo({silent:false});if(sum.A.length>0||sum.D.length>0||sum.M.length>0){sh.echo(error("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get");sh.exit(1);return false}else if(sum["??"].length>0){sh.echo(warning("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get")}return true}function getLogs(config={}){const{lastet,limit,branches}=config;const keys=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"];const results=sh.exec(`git log${limit?' -"'+limit+'"':""}${lastet?' --since="'+getSeconds(lastet)+'"':""}${branches?' --branches="*'+branches+'"':""} --date-order --pretty=format:"${keys.join(",=")}-end-"`,{silent:true}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let logList=[];results&&results.split("-end-").forEach(log=>{let args=log.split(",="),map={};keys.forEach((key,i)=>{map[key]=args[i]});logList.push(map)});return logList}const checkBranch=async name=>{const data=await queue([`gitm branch -k ${name}`]);return data[0].out.replace(/^\s+/,"")};function getCurrent(){return sh.exec("git symbolic-ref --short -q HEAD",{silent:true}).stdout.replace(/[\n\s]*$/g,"")}const searchBranch=async(key,type,remote=false)=>{const data=(await queue([`gitm branch${key?" -k "+key:""}${type?" -t "+type:""}${remote?" -r":""}`]))[0].out.replace(/^\*\s+/,"");let arr=data?data.split("\n"):[];arr=arr.map(el=>el.trim());return arr};const searchBranchs=(opt={})=>{let{path,key,type,remote=false}=opt;if(!path)path=sh.pwd().stdout;const data=sh.exec(`git ls-remote${remote?" --refs":" --heads"} --quiet --sort="version:refname" ${path}`,{silent:true}).stdout.replace(/\n*$/g,"");let arr=data?data.split("\n"):[],map={heads:[],tags:[],others:[]};for(let el of arr){let match=el.match(/^\w+[\s]+refs\/(heads|remotes|tags)\/([\w-\/]+)$/);if(!match)continue;switch(match[1]){case"heads":map.heads.push(match[2]);break;case"remotes":map.heads.push(match[2]);break;case"tags":map.tags.push(match[2]);break;default:map.others.push(match[2]);break}}if(type&&["bugfix","feature","support"].includes(type)){map.heads=map.heads.filter(el=>el.indexOf("/"+type+"/")>-1)}if(key){map.heads=map.heads.filter(el=>el.indexOf(key)>-1)}return map.heads};const filterBranch=(key,types=[],remote=false)=>{if(typeof types==="string")types=types.split(",");const out=sh.exec(`git branch${remote?" -a":""}`,{silent:true}).stdout.replace(/(^\s+|[\n\r]*$)/g,"").replace(/\*\s+/,"");let list=out?out.replace(/\n(\s+)/g,"\n").split("\n"):[];list=list.filter(el=>{let result=true;if(key&&!el.includes(key))result=false;if(result&&types.length>0){result=false;type:for(const type of types){if(el.includes(type)){result=true;break type}}}return result});return list};const getStashList=async key=>{const data=(await queue(["git stash list"]))[0].out.replace(/^\*\s+/,"");let list=data&&data.split("\n")||[],arr=[];if(list.length>10)sh.echo(warning(`\u8BE5\u9879\u76EE\u4E0B\u4E00\u5171\u6709${list.length}\u6761\u6682\u5B58\u8BB0\u5F55\uFF0C\u5EFA\u8BAE\u5B9A\u671F\u6E05\u7406\uFF01`));try{list.forEach(item=>{let msgArr=item.split(":"),first=msgArr.shift();if(!key||key&&key===msgArr[msgArr.length-1].trim()){let m=first.match(/^stash@\{(\d+)\}$/);if(msgArr.length>1)msgArr.shift();arr.push({key:first,index:+m[1],msg:msgArr.join(":").trim()})}})}catch(e){}return arr};function getMessage(type){const{root}=gitRevParse();const{appName}=getGitConfig();const config=getConfig();let str="",d=new Date;switch(type){case"time":str=d;break;case"timeNum":str=d.getTime();break;case"pwd":str=root;break;case"project":str=appName;break;case"user":str=config.user;break;default:break}return str}function postMessage(msg){const config=getConfig();if(!config.msgTemplate){sh.echo(error("请配置消息发送api模板地址"));return}let message=mapTemplate(config.msgTemplate,key=>{if(key==="message")return msg;return getMessage(key)});config.msgUrl&&sendMessage(message)}const sendMessage=(message,cfg={})=>{const config=getConfig();const{silent=true}=cfg;if(!config.msgUrl){sh.echo(error("请配置消息推送地址"));return}message=message.replace(/\s/g,"");config.msgUrl&&sh.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${message}'"}}' "${config.msgUrl}"`,{silent:silent})};function getCommandMessage(cmd){let msg={},arr=cmd.replace(/[\s]+/g," ").split(" ");if(arr.length<2||arr[0]!=="git")return msg;switch(arr[1]){case"checkout":msg.success="切换分支成功";msg.fail="切换分支失败";break;case"pull":msg.success="拉取代码成功";msg.fail="拉取代码失败";break;case"fetch":msg.success="抓取成功";msg.fail="抓取失败";break;case"commit":msg.success="提交成功";msg.fail="提交失败";break;case"push":msg.success="推送成功";msg.fail="推送失败";break;case"cherry-pick":msg.success="同步提交记录成功";msg.fail="同步提交记录失败";break;case"merge":msg.success="merge分支成功";msg.fail="merge分支失败";break;case"rebase":msg.success="rebase分支成功";msg.fail="rebase分支失败";break;case"revert":msg.success="撤销成功";msg.fail="撤销失败";break;case"clean":msg.success="清理成功";msg.fail="清理失败";break;default:break}return msg}function compareVersion(basicVer,compareVer){if(basicVer===null)return null;basicVer=basicVer+".";compareVer=compareVer+".";let bStr=parseFloat(basicVer),cStr=parseFloat(compareVer),bStrNext=parseFloat(basicVer.replace(bStr+".",""))||0,cStrNext=parseFloat(compareVer.replace(cStr+".",""))||0;if(cStr>bStr){return false}else if(cStr<bStr){return true}else{if(bStrNext>=cStrNext){return true}else{return false}}}function getBranchsFromID(commitID,remote=false){const out=sh.exec(`git branch ${remote?"-r":""} --contains ${commitID} --format="%(refname:short)`,{silent:true}).stdout.replace(/(^\s+|\n*$)/g,"");return out?out.split("\n"):[]}function getGitUser(){return sh.exec(`git config user.name`,{silent:true}).stdout.replace(/(^\s+|\n*$)/g,"")}function getGitEmail(){return sh.exec(`git config user.email`,{silent:true}).stdout.replace(/(^\s+|\n*$)/g,"")}module.exports={warning:warning,error:error,success:success,writeFile:writeFile,mapTemplate:mapTemplate,getSeconds:getSeconds,wait:wait,queue:queue,getCache:getCache,setCache:setCache,setLog:setLog,getStatusInfo:getStatusInfo,getStatus:getStatus,getLogs:getLogs,checkBranch:checkBranch,getCurrent:getCurrent,searchBranch:searchBranch,searchBranchs:searchBranchs,filterBranch:filterBranch,getStashList:getStashList,postMessage:postMessage,sendMessage:sendMessage,getCommandMessage:getCommandMessage,compareVersion:compareVersion,getBranchsFromID:getBranchsFromID,getGitUser:getGitUser,getGitEmail:getGitEmail};