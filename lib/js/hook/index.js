"use strict";const e=require("fs"),i=require("path"),n=require("shelljs"),{warning:t,getCurrent:o,getLogs:s,compareVersion:r}=require("../index"),{hookList:c}=require("../global"),l=require("../gitRevParse"),u=require("../getGitVersion"),a=require("./getHookComment"),g=require("./getHookType"),f=require("./getHookShell"),h=require("./getLocalShell"),m=require("ci-info"),p=require("../getConfig"),S=o(),{gitHookDir:d,prefix:y}=l(),k=u(),x=p();module.exports={init:function(){const o=k&&r(k,"2.13.0");m.isCI&&x.skipCI?console.info("持续集成环境，跳过钩子安装"):(e.existsSync(d)||e.mkdirSync(d),["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")&&(n.echo(t("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装")),process.exit(0)),o||(n.echo(t("Gitmars需要使用2.13.0以上版本的Git，当前版本："+k)),process.exit(0)),function(n=d){const t=(i,n)=>{e.writeFileSync(i,n,"utf-8"),e.chmodSync(i,493)};c.map((e=>i.join(n,e))).forEach((n=>{const o=`#!/bin/sh\n# gitmars\n\n${a()}\n\n. "$(dirname "$0")/gitmars.sh"`,s=i.basename(n);if(e.existsSync(n)){const i=e.readFileSync(n,"utf-8");return g.isGhooks(i)?(console.info(`合并已存在的ghooks钩子: ${s}`),t(n,o)):g.isPreCommit(i)?(console.info(`合并已存在的pre-commit钩子: ${s}`),t(n,o)):g.isGitmars(i)||g.isHusky(i)||g.isYorkie(i)?t(n,o):void console.info(`跳过已存在的用户git钩子: ${s}`)}t(n,o)}))}(d),function(n=d){const t=i.join(n,"gitmars.sh");e.writeFileSync(t,f(),"utf-8"),e.chmodSync(t,493)}(d),function(n=d,t,o){const s=i.join(n,"gitmars.local.sh");e.writeFileSync(s,h(t,o),"utf-8"),e.chmodSync(s,493)}(d,"yarn",y),console.info("gitmars hooks init down"))},remove:function(){!function(n=d){c.map((e=>i.join(n,e))).filter((i=>{if(e.existsSync(i)){const n=e.readFileSync(i,"utf-8");return g.isGitmars(n)}return!1})).forEach((i=>{e.unlinkSync(i)}))}(),function(n=d){const t=i.join(n,"gitmars.sh");e.existsSync(t)&&e.unlinkSync(t)}(),function(n=d){const t=i.join(n,"gitmars.local.sh");e.existsSync(t)&&e.unlinkSync(t)}(),console.info("gitmars hooks removed")},getIsMergedBranch:function(e=S,i="dev"){return n.exec(`git branch --contains ${e}`,{silent:!0}).stdout.replace(/\s+$/g,"").split("\n").includes(i)},getIsUpdatedInTime:function({latest:e,limit:i,branch:n}){let t=!1;const o=[],r=[],c=s({latest:e,limit:i,branches:n}),l=s({latest:e,limit:i,branches:S});c.forEach((e=>{o.push(e["%H"])})),l.forEach((e=>{(e["%P"]?e["%P"].split(" "):[]).forEach((e=>{r.push(e)}))}));e:for(const e of o)if(r.includes(e)){t=!0;break e}return t},getIsMergeAction:function(){const e=s({limit:1,branches:S});return(e[0]["%P"]?e[0]["%P"].split(" "):[]).length>1},getBehandLogs:function(){n.exec("git fetch",{silent:!0});const e=n.exec(`git log ${S}..origin/${S} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/\s+$/g,"");return e?e.split("\n"):[]},getAheadLogs:function(){n.exec("git fetch",{silent:!0});const e=n.exec(`git log origin/${S}..${S} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/\s+$/g,"");return e?e.split("\n"):[]}};
