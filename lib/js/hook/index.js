const fs=require("fs");const path=require("path");const sh=require("shelljs");const{warning,getCurrent,getLogs,compareVersion}=require("../index");const{hookList}=require("../global");const{gitHookDir,prefix}=require("../gitRevParse")();const gitVersion=require("../getGitVersion")();const getHookComment=require("./getHookComment");const getHookType=require("./getHookType");const getHookShell=require("./getHookShell");const getLocalShell=require("./getLocalShell");const ciInfo=require("ci-info");const current=getCurrent();function createHooks(dir=gitHookDir){const writeHook=(filename,shell)=>{fs.writeFileSync(filename,shell,"utf-8");fs.chmodSync(filename,493)};const hooks=hookList.map(hookName=>path.join(dir,hookName));hooks.forEach(filename=>{const hookShell=`#!/bin/sh
# gitmars

${getHookComment()}

. "$(dirname "$0")/gitmars.sh"`;const name=path.basename(filename);if(fs.existsSync(filename)){const hook=fs.readFileSync(filename,"utf-8");if(getHookType.isGhooks(hook)){console.info(`\u5408\u5E76\u5DF2\u5B58\u5728\u7684ghooks\u94A9\u5B50: ${name}`);return writeHook(filename,hookShell)}if(getHookType.isPreCommit(hook)){console.info(`\u5408\u5E76\u5DF2\u5B58\u5728\u7684pre-commit\u94A9\u5B50: ${name}`);return writeHook(filename,hookShell)}if(getHookType.isGitmars(hook)||getHookType.isHusky(hook)||getHookType.isYorkie(hook)){return writeHook(filename,hookShell)}console.info(`\u8DF3\u8FC7\u5DF2\u5B58\u5728\u7684\u7528\u6237git\u94A9\u5B50: ${name}`);return}writeHook(filename,hookShell)})}function removeHooks(dir=gitHookDir){const hooks=hookList.map(hookName=>path.join(dir,hookName));hooks.filter(filename=>{if(fs.existsSync(filename)){const hook=fs.readFileSync(filename,"utf-8");return getHookType.isGitmars(hook)}return false}).forEach(filename=>{fs.unlinkSync(filename)})}function createHookShell(dir=gitHookDir){let filename=path.join(dir,"gitmars.sh");fs.writeFileSync(filename,getHookShell(),"utf-8");fs.chmodSync(filename,493)}function removeHookShell(dir=gitHookDir){const filename=path.join(dir,"gitmars.sh");if(fs.existsSync(filename))fs.unlinkSync(filename)}function createLocalShell(dir=gitHookDir,pmName,relativeUserPkgDir){let filename=path.join(dir,"gitmars.local.sh");fs.writeFileSync(filename,getLocalShell(pmName,relativeUserPkgDir),"utf-8");fs.chmodSync(filename,493)}function removeLocalShell(dir=gitHookDir){const filename=path.join(dir,"gitmars.local.sh");if(fs.existsSync(filename))fs.unlinkSync(filename)}function getIsMergedBranch(branch=current,targetBranch="dev"){const result=sh.exec(`git branch --contains ${branch}`,{silent:true}).stdout.replace(/[\s]*$/g,"");return result.split("\n").includes(targetBranch)}function getIsUpdatedInTime({latest,limit,branch:branches}){let isUpdated=false,mainVers=[],currentVers=[];const mainLogs=getLogs({latest:latest,limit:limit,branches:branches});const currentLogs=getLogs({latest:latest,limit:limit,branches:current});mainLogs.forEach(log=>{mainVers.push(log["%H"])});currentLogs.forEach(log=>{let arr=log["%P"]?log["%P"].split(" "):[];arr.forEach(item=>{currentVers.push(item)})});mainVer:for(let ver of mainVers){if(currentVers.includes(ver)){isUpdated=true;break mainVer}}return isUpdated}function getIsMergeAction(){const currentLogs=getLogs({limit:1,branches:current});let p=currentLogs[0]["%P"]?currentLogs[0]["%P"].split(" "):[];return p.length>1}function getBehandLogs(){sh.exec(`git fetch`,{silent:true});const result=sh.exec(`git log ${current}..origin/${current} --pretty=format:"%p"`,{silent:true}).stdout.replace(/[\s]*$/g,"");return result?result.split("\n"):[]}function getAheadLogs(){sh.exec(`git fetch`,{silent:true});const result=sh.exec(`git log origin/${current}..${current} --pretty=format:"%p"`,{silent:true}).stdout.replace(/[\s]*$/g,"");return result?result.split("\n"):[]}function init(){const gitVersionIsNew=compareVersion(gitVersion,"2.13.0");if(ciInfo.isCI&&config.skipCI){console.info("持续集成环境，跳过钩子安装");return}if(!fs.existsSync(gitHookDir)){fs.mkdirSync(gitHookDir)}if(["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")){sh.echo(warning("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装"));process.exit(0)}if(!gitVersionIsNew){sh.echo(warning("Gitmars需要使用2.13.0以上版本的Git，当前版本："+gitVersion));process.exit(0)}createHooks(gitHookDir);createHookShell(gitHookDir);createLocalShell(gitHookDir,"yarn",prefix);console.info("gitmars hooks init down")}function remove(){removeHooks();removeHookShell();removeLocalShell();console.info("gitmars hooks removed")}module.exports={init:init,remove:remove,getIsMergedBranch:getIsMergedBranch,getIsUpdatedInTime:getIsUpdatedInTime,getIsMergeAction:getIsMergeAction,getBehandLogs:getBehandLogs,getAheadLogs:getAheadLogs};