"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("fs"),t=require("path"),o=require("shelljs"),{warning:i,getCurrent:n,getLogs:r,compareVersion:s}=require("../index"),{hookList:c}=require("../global"),l=require("../gitRevParse"),a=require("../getGitVersion"),u=require("./getHookComment"),g=require("./getHookType"),f=require("./getHookShell"),h=require("./getLocalShell"),p=require("ci-info"),m=require("../getConfig"),d=n(),{gitHookDir:x,prefix:S}=l(),y=a(),k=m();function I(o=x){const i=(t,o)=>{e.writeFileSync(t,o,"utf-8"),e.chmodSync(t,493)};c.map((e=>t.join(o,e))).forEach((o=>{const n=`#!/bin/sh\n# gitmars\n\n${u()}\n\n. "$(dirname "$0")/gitmars.sh"`,r=t.basename(o);if(e.existsSync(o)){const t=e.readFileSync(o,"utf-8");return g.isGhooks(t)?(console.info(`合并已存在的ghooks钩子: ${r}`),i(o,n)):g.isPreCommit(t)?(console.info(`合并已存在的pre-commit钩子: ${r}`),i(o,n)):g.isGitmars(t)||g.isHusky(t)||g.isYorkie(t)?i(o,n):void console.info(`跳过已存在的用户git钩子: ${r}`)}i(o,n)}))}function $(o=x){c.map((e=>t.join(o,e))).filter((t=>{if(e.existsSync(t)){const o=e.readFileSync(t,"utf-8");return g.isGitmars(o)}return!1})).forEach((t=>{e.unlinkSync(t)}))}function q(o=x){let i=t.join(o,"gitmars.sh");e.writeFileSync(i,f(),"utf-8"),e.chmodSync(i,493)}function v(o=x){const i=t.join(o,"gitmars.sh");e.existsSync(i)&&e.unlinkSync(i)}function H(o=x,i,n){let r=t.join(o,"gitmars.local.sh");e.writeFileSync(r,h(i,n),"utf-8"),e.chmodSync(r,493)}function b(o=x){const i=t.join(o,"gitmars.local.sh");e.existsSync(i)&&e.unlinkSync(i)}function L(e=d,t="dev"){return o.exec(`git branch --contains ${e}`,{silent:!0}).stdout.replace(/[\s]*$/g,"").split("\n").includes(t)}function P({latest:e,limit:t,branch:o}){let i=!1,n=[],s=[];const c=r({latest:e,limit:t,branches:o}),l=r({latest:e,limit:t,branches:d});c.forEach((e=>{n.push(e["%H"])})),l.forEach((e=>{(e["%P"]?e["%P"].split(" "):[]).forEach((e=>{s.push(e)}))}));e:for(let e of n)if(s.includes(e)){i=!0;break e}return i}function j(){const e=r({limit:1,branches:d});return(e[0]["%P"]?e[0]["%P"].split(" "):[]).length>1}function G(){o.exec("git fetch",{silent:!0});const e=o.exec(`git log ${d}..origin/${d} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/[\s]*$/g,"");return e?e.split("\n"):[]}function M(){o.exec("git fetch",{silent:!0});const e=o.exec(`git log origin/${d}..${d} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/[\s]*$/g,"");return e?e.split("\n"):[]}function A(){const t=y&&s(y,"2.13.0");p.isCI&&k.skipCI?console.info("持续集成环境，跳过钩子安装"):(e.existsSync(x)||e.mkdirSync(x),["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")&&(o.echo(i("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装")),process.exit(0)),t||(o.echo(i("Gitmars需要使用2.13.0以上版本的Git，当前版本："+y)),process.exit(0)),I(x),q(x),H(x,"yarn",S),console.info("gitmars hooks init down"))}function C(){$(),v(),b(),console.info("gitmars hooks removed")}var _={init:A,remove:C,getIsMergedBranch:L,getIsUpdatedInTime:P,getIsMergeAction:j,getBehandLogs:G,getAheadLogs:M};exports.createHookShell=q,exports.createHooks=I,exports.createLocalShell=H,exports.default=_,exports.getAheadLogs=M,exports.getBehandLogs=G,exports.getIsMergeAction=j,exports.getIsMergedBranch=L,exports.getIsUpdatedInTime=P,exports.init=A,exports.remove=C,exports.removeHookShell=v,exports.removeHooks=$,exports.removeLocalShell=b;
