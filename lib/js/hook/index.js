"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs"),t=require("path"),o=require("shelljs"),n=require("colors"),r=require("slash"),i=require("cosmiconfig"),s=require("ci-info");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var c=a(e),l=a(t),u=a(o),f=a(n),d=a(r),p=a(s);function g(e=process.cwd()){const t=u.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[o,n,r,i,s=""]=t.split("\n").map((e=>e.trim())).map(d.default);return{prefix:n||".",gitCommonDir:r,root:o,gitDir:i,gitHookDir:i+"/hooks",cdup:s}}const m=["applypatch-msg","pre-applypatch","post-applypatch","pre-commit","pre-merge-commit","prepare-commit-msg","commit-msg","post-commit","pre-rebase","post-checkout","post-merge","pre-push","post-update","push-to-checkout","pre-auto-gc","post-rewrite","sendemail-validate"],h={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function x(e){return f.default.yellow(e)}function y(e={}){const{lastet:t,limit:o,branches:n}=e,r=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"],i=u.default.exec(`git log${o?' -"'+o+'"':""}${t?' --since="'+function(e){const t=String(e).match(/^(\d+)([a-zA-Z]+)$/);let o;if(!t)return null;switch(o=+t[1],t[2]){case"m":o*=60;break;case"h":o*=3600;break;case"d":o*=86400;break;case"w":o*=604800;break;case"M":o*=2592e3;break;case"y":o*=31536e3}return parseInt(String(Date.now()/1e3-o))}(t)+'"':""}${n?' --branches="*'+n+'"':""} --date-order --pretty=format:"${r.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let s=[];return i&&i.split("-end-").forEach((e=>{let t=e.split(",="),o={};r.forEach(((e,n)=>{o[e]=t[n]})),s.push(o)})),s}function $(e){if(!e){let{root:t}=g();e=t}const t=l.default.resolve(e,"package.json"),o=c.default.readFileSync(t,"utf-8");return JSON.parse(o)}const{gitUrl:k}=function(e=process.cwd()){const t=u.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[o]=t.split("\n").map((e=>e.trim())).map(d.default);return{gitUrl:o,appName:o.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),{root:S}=g();function b(){const{author:e,homepage:t,version:o}=$();return`# Created by gitmars v${o} (${t})\n# author: ${e}\n# At: ${(new Date).toLocaleString()}\n# From: ${S} (${k})`}Object.defineProperty(exports,"__esModule",{value:!0});var v={isHusky:function(e){return e.indexOf("# husky")>-1||e.indexOf("#husky")>-1},isGitmars:function(e){return e.indexOf("# gitmars")>-1},isYorkie:function(e){return e.indexOf("#yorkie")>-1},isGhooks:function(e){return e.indexOf("// Generated by ghooks. Do not edit this file.")>-1},isPreCommit:function(e){return e.indexOf("./node_modules/pre-commit/hook")>-1}};const I=b();const j=u.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,""),{gitHookDir:w,prefix:O}=g(),H=function(){let e=u.default.exec("git --version",{silent:!0}).stdout.replace(/\s*$/g,"").match(/[\d.?]+/g);return e?(e=e[0],e):(u.default.echo(x("没有找到git")),void u.default.exit(1))}(),F=function(e,t="gitmars"){let o;if(!e){let{root:t}=g();try{e=t+"/gitmarsconfig.json",o=c.default.statSync(e)}catch(o){e=t}}const n={skipCI:!0},r=i.cosmiconfigSync(t);if(o||(o=c.default.statSync(e)),o.isDirectory()){const{config:t={},filepath:o=""}=r.search(e)||{};return Object.assign({},h,n,t,{filepath:o})}{const{config:t={},filepath:o=""}=r.load(e)||{};return Object.assign({},h,n,t,{filepath:o})}}();function _(e=w){const t=(e,t)=>{c.default.writeFileSync(e,t,"utf-8"),c.default.chmodSync(e,493)};m.map((t=>l.default.join(e,t))).forEach((e=>{const o=`#!/bin/sh\n# gitmars\n\n${b()}\n\n. "$(dirname "$0")/gitmars.sh"`,n=l.default.basename(e);if(c.default.existsSync(e)){const r=c.default.readFileSync(e,"utf-8");return v.isGhooks(r)?(console.info(`合并已存在的ghooks钩子: ${n}`),t(e,o)):v.isPreCommit(r)?(console.info(`合并已存在的pre-commit钩子: ${n}`),t(e,o)):v.isGitmars(r)||v.isHusky(r)||v.isYorkie(r)?t(e,o):void console.info(`跳过已存在的用户git钩子: ${n}`)}t(e,o)}))}function D(e=w){m.map((t=>l.default.join(e,t))).filter((e=>{if(c.default.existsSync(e)){const t=c.default.readFileSync(e,"utf-8");return v.isGitmars(t)}return!1})).forEach((e=>{c.default.unlinkSync(e)}))}function P(e=w){let t=l.default.join(e,"gitmars.sh");c.default.writeFileSync(t,function(){const e=$(),t=c.default.readFileSync(l.default.join(__dirname,"../../sh/gitmars.sh"),"utf-8").replace('gitmarsVersion="0.0.0"',`gitmarsVersion="${e.version}"`);return[b(),"",t].join("\n")}(),"utf-8"),c.default.chmodSync(t,493)}function A(e=w){const t=l.default.join(e,"gitmars.sh");c.default.existsSync(t)&&c.default.unlinkSync(t)}function G(e=w,t,o){let n=l.default.join(e,"gitmars.local.sh");c.default.writeFileSync(n,function(e,t){return`${I}\n\npackageManager=${e}\ncd "${t}"\n`}(t,o),"utf-8"),c.default.chmodSync(n,493)}function M(e=w){const t=l.default.join(e,"gitmars.local.sh");c.default.existsSync(t)&&c.default.unlinkSync(t)}function L(e=j,t="dev"){return u.default.exec(`git branch --contains ${e}`,{silent:!0}).stdout.replace(/[\s]*$/g,"").split("\n").includes(t)}function q({latest:e,limit:t,branch:o}){let n=!1,r=[],i=[];const s=y({latest:e,limit:t,branches:o}),a=y({latest:e,limit:t,branches:j});s.forEach((e=>{r.push(e["%H"])})),a.forEach((e=>{(e["%P"]?e["%P"].split(" "):[]).forEach((e=>{i.push(e)}))}));e:for(let e of r)if(i.includes(e)){n=!0;break e}return n}function C(){const e=y({limit:1,branches:j});return(e[0]["%P"]?e[0]["%P"].split(" "):[]).length>1}function E(){u.default.exec("git fetch",{silent:!0});const e=u.default.exec(`git log ${j}..origin/${j} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/[\s]*$/g,"");return e?e.split("\n"):[]}function T(){u.default.exec("git fetch",{silent:!0});const e=u.default.exec(`git log origin/${j}..${j} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/[\s]*$/g,"");return e?e.split("\n"):[]}function U(){const e=H&&function(e,t){if(null===e)return null;e+=".",t+=".";let o=parseFloat(e),n=parseFloat(t),r=parseFloat(e.replace(o+".",""))||0,i=parseFloat(t.replace(n+".",""))||0;return!(n>o)&&(n<o||r>=i)}(H,"2.13.0");p.default.isCI&&F.skipCI?console.info("持续集成环境，跳过钩子安装"):(c.default.existsSync(w)||c.default.mkdirSync(w),["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")&&(u.default.echo(x("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装")),process.exit(0)),e||(u.default.echo(x("Gitmars需要使用2.13.0以上版本的Git，当前版本："+H)),process.exit(0)),_(w),P(w),G(w,"yarn",O),console.info("gitmars hooks init down"))}function B(){D(),A(),M(),console.info("gitmars hooks removed")}var K={init:U,remove:B,getIsMergedBranch:L,getIsUpdatedInTime:q,getIsMergeAction:C,getBehandLogs:E,getAheadLogs:T};exports.createHookShell=P,exports.createHooks=_,exports.createLocalShell=G,exports.default=K,exports.getAheadLogs=T,exports.getBehandLogs=E,exports.getIsMergeAction=C,exports.getIsMergedBranch=L,exports.getIsUpdatedInTime=q,exports.init=U,exports.remove=B,exports.removeHookShell=A,exports.removeHooks=D,exports.removeLocalShell=M;
