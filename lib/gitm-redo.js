#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("inquirer"),a=require("shelljs"),r=require("fs"),s=require("colors"),i=require("slash"),c=require("cosmiconfig");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=o(t),l=o(a),u=o(r),f=o(s),g=o(i);const m=[{required:!1,name:"commitid",variadic:!0,validator:(e,t,a)=>{a()},description:"需要撤销的ID"}],d=[{flags:"-b, --branch [branch]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-b",long:"--branch",negate:!1,description:"需要撤销的分支名",defaultValue:""},{flags:"-m, --mode [mode]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-m",long:"--mode",negate:!1,description:"针对撤销一次merge记录，需要传入类型：1 = 保留当前分支代码，2 = 保留传入代码",defaultValue:1}];function p(e=process.cwd()){const t=l.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[a,r,s,i,c=""]=t.split("\n").map((e=>e.trim())).map(g.default);return{prefix:r||".",gitCommonDir:s,root:a,gitDir:i,gitHookDir:i+"/hooks",cdup:c}}const h={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function b(e,t="gitmars"){let a;if(!e){let{root:t}=p();try{e=t+"/gitmarsconfig.json",a=u.default.statSync(e)}catch(a){e=t}}const r={skipCI:!0},s=c.cosmiconfigSync(t);if(a||(a=u.default.statSync(e)),a.isDirectory()){const{config:t={},filepath:a=""}=s.search(e)||{};return Object.assign({},h,r,t,{filepath:a})}{const{config:t={},filepath:a=""}=s.load(e)||{};return Object.assign({},h,r,t,{filepath:a})}}function k(e){return f.default.yellow(e)}function v(e){return f.default.red(e)}function y(e,t){0!==e.length?t(e[0],((a=!1)=>{a||(e.shift(),y(e,t))})):t()}function $(e){return new Promise(((t,a)=>{let r=[];0===e.length&&a("指令名称不能为空"),y(e=JSON.parse(JSON.stringify(e)),((a,s)=>{let i={silent:!0,postmsg:!1,kill:!0,again:!1},c=a;a instanceof Object&&(i=Object.assign(i,a.config||{}),c=a.cmd),c?l.default.exec(c,i,((t,o,n)=>{let u=function(e){let t={},a=e.replace(/[\s]+/g," ").split(" ");if(a.length<2||"git"!==a[0])return t;switch(a[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{o=JSON.parse(o)}catch(n){o=o.replace(/\n*$/g,"")}if(r.push({code:t,out:o,err:n,cfg:i,cmd:c}),0!==t&&function(e){const{gitDir:t}=p();l.default.touch(t+"/.gitmarslog"),l.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:a,code:t,out:o,err:n}),0!==t&&i.kill){let t=JSON.parse(JSON.stringify(e));i.again?!0!==i.again&&t.splice(0,1,i.again):t.shift(),s(!0),function(e){const{gitDir:t}=p();l.default.touch(t+"/.gitmarscommands"),l.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),i.silent&&l.default.echo(v(n)),l.default.echo(v(i.fail||u.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),i.postmsg&&w("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&l.default.echo(v("请处理相关问题之后输入gitm continue继续")),l.default.exit(1)}else{if(0===t){let e=i.success||u.success;e&&(l.default.echo((g=e,f.default.green(g))),i.postmsg&&w(e))}else{let e=i.fail||u.fail||"指令 "+c+" 执行失败";e&&l.default.echo(k(e))}s()}var g})):t(r)}))}))}function x(e){const{root:t}=p(),{appName:a}=function(e=process.cwd()){const t=l.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[a]=t.split("\n").map((e=>e.trim())).map(g.default);return{gitUrl:a,appName:a.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),r=b();let s="",i=new Date;switch(e){case"time":s=i;break;case"timeNum":s=i.getTime();break;case"pwd":s=t;break;case"project":s=a;break;case"user":s=r.user}return s}function w(e=""){const t=b();if(!t.msgTemplate)return void l.default.echo(v("请配置消息发送api模板地址"));let a=(r=t.msgTemplate,s=t=>"message"===t?e:x(t),r&&s?""+r.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof s)return s(t);for(let e in s)if(t===e)return s[e]})):null);var r,s;t.msgUrl&&function(e="",t={}){const a=b(),{silent:r=!0}=t;if(!a.msgUrl)return void l.default.echo(v("请配置消息推送地址"));e=e.replace(/\s/g,""),a.msgUrl&&l.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${a.msgUrl}"`,{silent:r})}(a)}l.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(l.default.echo(v("当前目录不是git项目目录")),l.default.exit(1)),e.program.name("gitm redo").usage("[commitid...] [-b --branch [branch]] [-m --mode [mode]]").description("撤销一次提交记录"),m.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let a=e.name;e.variadic&&(a+="..."),a=e.required?"<"+a+">":"["+a+"]",t.push(a)})),t.join(" ")}(m)),d.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action((async(e,t)=>{let a=[],r="";if(t.mode&&(r=" -m "+Math.abs(Number(t.mode))),t.branch){const e=["%H","%aI","%an"],s=l.default.exec(`git log --merges --grep="'${t.branch}'" --date-order --pretty=format:"${e.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let i=[],c=i.map((e=>e["%H"]));if(s&&s.split("-end-").forEach((t=>{let a=t.split(",="),r={};e.forEach(((e,t)=>{r[e]=a[t]})),i.push(r)})),i.reverse(),i.length>1){const e={type:"checkbox",message:"检测到存在多条记录，请选择要撤销的项",name:"commitIDs",choices:[]};i.forEach((t=>{e.choices.push({name:`${t["%an"]}操作于：${t["%aI"]}`,value:t["%H"],checked:!0})}));const{commitIDs:t}=await n.default.prompt(e);c=t}c.forEach((e=>{a.push({cmd:`git revert ${e}${r}`,config:{slient:!1,again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}})}))}else e?a.push({cmd:`git revert ${e}${r}`,config:{slient:!1,again:!0,success:"撤销成功",fail:"出错了，请根据提示处理"}}):(l.default.echo(k("指令不合法")),l.default.exit(1));$(a)})),e.program.parse(process.argv);
