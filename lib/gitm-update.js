#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),s=require("fs"),a=require("colors"),i=require("slash"),r=require("cosmiconfig");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var c=n(t),l=n(s),o=n(a),u=n(i);const f=[{required:!1,name:"type",variadic:!1,description:"分支类型"},{required:!1,name:"name",variadic:!1,description:"分支名称(不带feature/bugfix前缀)"}],g=[{flags:"--use-merge",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--use-merge",negate:!1,description:"使用merge方式更新(默认merge)",defaultValue:!0,recommend:!0},{flags:"--use-rebase",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--use-rebase",negate:!1,description:"使用rebase方式更新(默认merge)",defaultValue:!1,recommend:!0},{flags:"-a --all",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"-a",long:"--all",negate:!1,description:"更新本地所有bugfix、feature、support分支",defaultValue:!1,recommend:!1}];function p(e=process.cwd()){const t=c.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,a,i,r,n=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:a||".",gitCommonDir:i,root:s,gitDir:r,gitHookDir:r+"/hooks",cdup:n}}const d={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function m(e,t="gitmars"){let s;if(!e){let{root:t}=p();try{e=t+"/gitmarsconfig.json",s=l.default.statSync(e)}catch(s){e=t}}const a={skipCI:!0},i=r.cosmiconfigSync(t);if(s||(s=l.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=i.search(e)||{};return Object.assign({},d,a,t,{filepath:s})}{const{config:t={},filepath:s=""}=i.load(e)||{};return Object.assign({},d,a,t,{filepath:s})}}function h(e){return o.default.yellow(e)}function b(e){return o.default.red(e)}function $(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),$(e,t))})):t()}function x(e){return new Promise(((t,s)=>{let a=[];0===e.length&&s("指令名称不能为空"),$(e=JSON.parse(JSON.stringify(e)),((s,i)=>{let r={silent:!0,postmsg:!1,kill:!0,again:!1},n=s;s instanceof Object&&(r=Object.assign(r,s.config||{}),n=s.cmd),n?c.default.exec(n,r,((t,l,u)=>{let f=function(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(n);try{l=JSON.parse(l)}catch(u){l=l.replace(/\n*$/g,"")}if(a.push({code:t,out:l,err:u,cfg:r,cmd:n}),0!==t&&function(e){const{gitDir:t}=p();c.default.touch(t+"/.gitmarslog"),c.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:s,code:t,out:l,err:u}),0!==t&&r.kill){let t=JSON.parse(JSON.stringify(e));r.again?!0!==r.again&&t.splice(0,1,r.again):t.shift(),i(!0),function(e){const{gitDir:t}=p();c.default.touch(t+"/.gitmarscommands"),c.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),r.silent&&c.default.echo(b(u)),c.default.echo(b(r.fail||f.fail||"出错了！指令 "+n+" 执行失败，中断了进程")),r.postmsg&&v("出错了！指令 "+n+" 执行失败，中断了进程"),t.length>0&&c.default.echo(b("请处理相关问题之后输入gitm continue继续")),c.default.exit(1)}else{if(0===t){let e=r.success||f.success;e&&(c.default.echo((g=e,o.default.green(g))),r.postmsg&&v(e))}else{let e=r.fail||f.fail||"指令 "+n+" 执行失败";e&&c.default.echo(h(e))}i()}var g})):t(a)}))}))}function y(){let e=function(e={}){const{silent:t=!0}=e,s=c.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let a=s?s.replace(/\n(\s+)/g,"\n").split("\n"):[],i={A:[],D:[],M:[],"??":[]};return 0===a.length||a.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),s=t.splice(0,1);i[s]||(i[s]=[]),i[s].push(t.join(" "))})),i}({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(c.default.echo(b("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),c.default.exit(1),!1):(e["??"].length>0&&c.default.echo(h("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function k(e){const{root:t}=p(),{appName:s}=function(e=process.cwd()){const t=c.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),a=m();let i="",r=new Date;switch(e){case"time":i=r;break;case"timeNum":i=r.getTime();break;case"pwd":i=t;break;case"project":i=s;break;case"user":i=a.user}return i}function v(e=""){const t=m();if(!t.msgTemplate)return void c.default.echo(b("请配置消息发送api模板地址"));let s=(a=t.msgTemplate,i=t=>"message"===t?e:k(t),a&&i?""+a.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof i)return i(t);for(let e in i)if(t===e)return i[e]})):null);var a,i;t.msgUrl&&function(e="",t={}){const s=m(),{silent:a=!0}=t;if(!s.msgUrl)return void c.default.echo(b("请配置消息推送地址"));e=e.replace(/\s/g,""),s.msgUrl&&c.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:a})}(s)}c.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(c.default.echo(b("当前目录不是git项目目录")),c.default.exit(1));const S=m();e.program.name("gitm update").usage("[type] [name]").description("更新bug任务分支、更新feature功能开发分支、框架调整分支support"),f.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let s=e.name;e.variadic&&(s+="..."),s=e.required?"<"+s+">":"["+s+"]",t.push(s)})),t.join(" ")}(f)),g.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t,s)=>{const a=["bugfix","feature","support"],i=[d.master,d.develop,d.release,d.bugfix,d.support];let r=y(),n=[],l=[];if(r||c.default.exit(1),s.all)e||(e=a),l=function(e,t=[],s=!1){"string"==typeof t&&(t=t.split(","));const a=c.default.exec("git branch"+(s?" -a":""),{silent:!0}).stdout.replace(/(^\s+|[\n\r]*$)/g,"").replace(/\*\s+/,"");let i=a?a.replace(/\n(\s+)/g,"\n").split("\n"):[];return i=i.filter((s=>{let a=!0;if(e&&!s.includes(e)&&(a=!1),a&&t.length>0){a=!1;e:for(const e of t)if(s.includes(e)){a=!0;break e}}return a})),i}("",e);else if(e&&t)a.includes(e)?l=[e+"/"+t]:(c.default.echo(b("type只允许输入："+JSON.stringify(a))),c.default.exit(1));else{const s=c.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"");[e,t]=s.split("/"),t||(i.includes(e)&&c.default.echo(b(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),c.default.exit(1)),a.includes(e)||(c.default.echo(b("type只允许输入："+JSON.stringify(a))),c.default.exit(1)),l=[].concat(s)}l.forEach((a=>{[e,t]=a.split("/");let i="bugfix"===e?S.bugfix:"support"===e?S.master:S.release,r=["git fetch",`git checkout ${i}`,"git pull",`git checkout ${e}/${t}`];s.useRebase?r.push({cmd:`git rebase ${i}`,config:{slient:!1,again:!1,success:`${i}更新到${e}/${t}成功`,fail:`${i}更新到${e}/${t}出错了，请根据提示处理`}}):r.push({cmd:`git merge --no-ff ${i}`,config:{slient:!1,again:!1,success:`${i}同步到${e}/${t}成功`,fail:`${i}同步到${e}/${t}出错了，请根据提示处理`}}),n=n.concat(r)})),x(n)})),e.program.parse(process.argv);
