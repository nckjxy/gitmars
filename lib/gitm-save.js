#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),s=require("fs"),a=require("colors"),r=require("slash"),i=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=c(t),n=c(s),l=c(a),u=c(r);const f={command:"save",short:"sv",args:[{required:!1,name:"message",variadic:!1,validator:(e,t,s)=>{/\s+/.test(e)?s(new Error("请不要输入空格")):s()},description:"存取关键字"}],options:[{flags:"-f, --force",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"-f",long:"--force",negate:!1,description:"没有版本的文件也暂存，这会执行git add .",defaultValue:!1}],validatorOpts:(e,t,s)=>{s()},validatorArgs:(e,t,s)=>{s()},transformOpts:(e,t,s)=>{s()},transformArgs:(e,t,s)=>{s()}},g=f.args,d=f.options;function m(e=process.cwd()){const t=o.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s,a,r,i,c=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:a||".",gitCommonDir:r,root:s,gitDir:i,gitHookDir:i+"/hooks",cdup:c}}const p={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function h(e,t="gitmars"){let s;if(!e){let{root:t}=m();try{e=t+"/gitmarsconfig.json",s=n.default.statSync(e)}catch(s){e=t}}const a={skipCI:!0},r=i.cosmiconfigSync(t);if(s||(s=n.default.statSync(e)),s.isDirectory()){const{config:t={},filepath:s=""}=r.search(e)||{};return Object.assign({},p,a,t,{filepath:s})}{const{config:t={},filepath:s=""}=r.load(e)||{};return Object.assign({},p,a,t,{filepath:s})}}function b(e){return l.default.red(e)}function v(e,t){0!==e.length?t(e[0],((s=!1)=>{s||(e.shift(),v(e,t))})):t()}function k(e){return new Promise(((t,s)=>{let a=[];0===e.length&&s("指令名称不能为空"),v(e=JSON.parse(JSON.stringify(e)),((s,r)=>{let i={silent:!0,postmsg:!1,kill:!0,again:!1},c=s;s instanceof Object&&(i=Object.assign(i,s.config||{}),c=s.cmd),c?o.default.exec(c,i,((t,n,u)=>{let f=function(e){let t={},s=e.replace(/[\s]+/g," ").split(" ");if(s.length<2||"git"!==s[0])return t;switch(s[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{n=JSON.parse(n)}catch(u){n=n.replace(/\n*$/g,"")}if(a.push({code:t,out:n,err:u,cfg:i,cmd:c}),0!==t&&function(e){const{gitDir:t}=m();o.default.touch(t+"/.gitmarslog"),o.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:s,code:t,out:n,err:u}),0!==t&&i.kill){let t=JSON.parse(JSON.stringify(e));i.again?!0!==i.again&&t.splice(0,1,i.again):t.shift(),r(!0),function(e){const{gitDir:t}=m();o.default.touch(t+"/.gitmarscommands"),o.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),i.silent&&o.default.echo(b(u)),o.default.echo(b(i.fail||f.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),i.postmsg&&x("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&o.default.echo(b("请处理相关问题之后输入gitm continue继续")),o.default.exit(1)}else{if(0===t){let e=i.success||f.success;e&&(o.default.echo((g=e,l.default.green(g))),i.postmsg&&x(e))}else{let e=i.fail||f.fail||"指令 "+c+" 执行失败";e&&o.default.echo(function(e){return l.default.yellow(e)}(e))}r()}var g})):t(a)}))}))}function y(e){const{root:t}=m(),{appName:s}=function(e=process.cwd()){const t=o.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[s]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:s,appName:s.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),a=h();let r="",i=new Date;switch(e){case"time":r=i;break;case"timeNum":r=i.getTime();break;case"pwd":r=t;break;case"project":r=s;break;case"user":r=a.user}return r}function x(e=""){const t=h();if(!t.msgTemplate)return void o.default.echo(b("请配置消息发送api模板地址"));let s=(a=t.msgTemplate,r=t=>"message"===t?e:y(t),a&&r?""+a.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof r)return r(t);for(let e in r)if(t===e)return r[e]})):null);var a,r;t.msgUrl&&function(e="",t={}){const s=h(),{silent:a=!0}=t;if(!s.msgUrl)return void o.default.echo(b("请配置消息推送地址"));e=e.replace(/\s/g,""),s.msgUrl&&o.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${s.msgUrl}"`,{silent:a})}(s)}o.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(o.default.echo(b("当前目录不是git项目目录")),o.default.exit(1)),e.program.name("gitm save").usage("[message]").description("暂存当前分支文件"),g.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let s=e.name;e.variadic&&(s+="..."),s=e.required?"<"+s+">":"["+s+"]",t.push(s)})),t.join(" ")}(g)),d.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action(((e,t)=>{e||(e=o.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,""));let s=[{cmd:`git stash save "${e}"`,config:{success:"文件暂存成功",fail:"出错了，请联系管理员"}}];t.force&&(s=["git add .",{cmd:`git stash save "${e}"`,config:{success:"文件暂存成功",fail:"出错了，请联系管理员"}}]),k(s)})),e.program.parse(process.argv);
