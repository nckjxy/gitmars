#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),i=require("slash"),o=require("fs"),r=require("colors"),s=require("cosmiconfig");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=a(t),c=a(i),l=a(o),u=a(r);function f(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i,o,r,s,a=""]=t.split("\n").map((e=>e.trim())).map(c.default);return{prefix:o||".",gitCommonDir:r,root:i,gitDir:s,gitHookDir:s+"/hooks",cdup:a}}const d={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function p(e){return u.default.red(e)}function g(e){return u.default.green(e)}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(p("当前目录不是git项目目录")),n.default.exit(1));const m=function(e,t="gitmars"){let i;if(!e){let{root:t}=f();try{e=t+"/gitmarsconfig.json",i=l.default.statSync(e)}catch(i){e=t}}const o={skipCI:!0},r=s.cosmiconfigSync(t);if(i||(i=l.default.statSync(e)),i.isDirectory()){const{config:t={},filepath:i=""}=r.search(e)||{};return Object.assign({},d,o,t,{filepath:i})}{const{config:t={},filepath:i=""}=r.load(e)||{};return Object.assign({},d,o,t,{filepath:i})}}();e.program.name("gitm config").usage("<option> [value]").command("set <option> [value]").description("设置gitmars的配置项").action((async(e,t)=>{let{filepath:i}=m;if(!i){const{root:e}=f();i=e+"/.gitmarsrc"}var o,r;t?Object.keys(d).includes(e)?(m[e]=t,delete m.filepath,delete m.skipCI,await(o=i,r=JSON.stringify(m,null,4),new Promise(((e,t)=>{l.default.writeFile(o,r,(i=>{i?t(new Error("文件写入错误")):e(!0)}))}))),n.default.echo(g("保存成功")),n.default.exit(0)):(n.default.echo(p("不支持"+e+"这个配置项")),n.default.exit(1)):(n.default.echo("请输入要配置的项"),n.default.exit(1))})),e.program.name("gitm config").usage("list [option]").command("list [option]").description("查询单个或全部gitmars的配置项").action((e=>{e?n.default.echo(g(m[e])):n.default.echo(g(m)),n.default.exit(0)})),e.program.parse(process.argv);
