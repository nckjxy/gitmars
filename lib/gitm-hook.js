#!/usr/bin/env node
const program=require("commander");const sh=require("shelljs");const{options,args}=require("./conf/hook");const{error,warning,success,getCurrent,getBranchsFromID,isGitProject}=require("./js/index");const{createArgs}=require("./js/tools");const{init,remove,getIsMergedBranch,getIsUpdatedInTime,getIsMergeAction,getBehandLogs,getAheadLogs}=require("./js/hook");if(!isGitProject()){sh.echo(error("当前目录不是git项目目录"));sh.exit(1)}const config=require("./js/getConfig")();program.name("gitm hook").usage("[command]").description("git hook钩子");if(args.length>0)program.arguments(createArgs(args));options.forEach(o=>{program.option(o.flags,o.description,o.defaultValue)});program.action(async(command,args2,opt)=>{console.log("gitmars hooks is running");if(opt.noVerify){sh.exit(0);return}if(command==="init"){init()}else if(command==="remove"){remove()}else{opt.type=opt.type?opt.type.split(","):[];const mainBranchs=[config.master,config.develop,config.release,config.support,config.bugfix];const current=getCurrent();const currentPrefix=current.split("/")[0];console.log(opt.type,process.env,process.argv,getBranchsFromID("2080d17e"));if(current!==config.develop&&mainBranchs.includes(current)&&opt.type.includes("1")){const[command2,branch]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[];if(command2==="merge"){const isMergedBranch=getIsMergedBranch(branch,config.develop);if(!isMergedBranch){console.info(error("检测到你的分支没有合并过"+config.develop));sh.exit(0)}else{console.info(success(branch+"合并过"+config.develop))}}}if(mainBranchs.includes(current)&&opt.type.includes("2")){const[command2,branch]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[];const branchPrefix=branch.split("/")[0];if(command2==="merge"){const isUpdatedInTime=getIsUpdatedInTime({latest:opt.latest,branch:branch});if(!isUpdatedInTime){console.info(error("检测到你1周内没有同步过主干"+branchPrefix+"分支代码"));sh.exit(0)}else{console.info(success(branch+"一周内同步过主干分支代码"))}}}if(mainBranchs.includes(current)&&opt.type.includes("3")){const isMergeAction=getIsMergeAction();if(!isMergeAction){console.info(error("检测到你直接在主干分支修改代码"));sh.exit(0)}else{console.info(success("最后一条记录是merge记录"))}}if(mainBranchs.includes(current)&&opt.type.includes("4")){const behandLogs=getBehandLogs();if(!behandLogs.length){console.info("你本地分支版本落后于远程分支，请先执行pull");sh.exit(0)}else{console.info(success("本地版本没有落后远程，可直接push"))}}}sh.exit(0)});program.parse(process.argv);