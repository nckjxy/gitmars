#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),n=require("fs"),i=require("colors"),o=require("slash"),r=require("cosmiconfig"),s=require("path"),a=require("ci-info");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=c(t),u=c(n),f=c(i),d=c(o),p=c(s),g=c(a);const m=[{required:!1,name:"command",variadic:!1},{required:!1,name:"args",variadic:!0}],h=[{flags:"--no-verify",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--no-verify",negate:!0,description:"是否需要跳过校验权限",defaultValue:!1},{flags:"--latest [latest]",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"",long:"--latest",negate:!1,description:"查询在某个时间之后的日志，填写格式：10s/2m/2h/3d/4M/5y",defaultValue:"7d"},{flags:"--limit [limit]",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"",long:"--limit",negate:!1,description:"最多查询的日志条数",defaultValue:20},{flags:"-t, --type <type>",required:!0,optional:!1,variadic:!1,mandatory:!1,short:"-t",long:"--type",negate:!1,description:"检测类型",defaultValue:""},{flags:"--branch [branch]",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"",long:"--branch",negate:!1,description:"要查询的分支",defaultValue:""}];function y(e=process.cwd()){const t=l.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[n,i,o,r,s=""]=t.split("\n").map((e=>e.trim())).map(d.default);return{prefix:i||".",gitCommonDir:o,root:n,gitDir:r,gitHookDir:r+"/hooks",cdup:s}}const v=["applypatch-msg","pre-applypatch","post-applypatch","pre-commit","pre-merge-commit","prepare-commit-msg","commit-msg","post-commit","pre-rebase","post-checkout","post-merge","pre-push","post-update","push-to-checkout","pre-auto-gc","post-rewrite","sendemail-validate"],$={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function k(e,t="gitmars"){let n;if(!e){let{root:t}=y();try{e=t+"/gitmarsconfig.json",n=u.default.statSync(e)}catch(n){e=t}}const i={skipCI:!0},o=r.cosmiconfigSync(t);if(n||(n=u.default.statSync(e)),n.isDirectory()){const{config:t={},filepath:n=""}=o.search(e)||{};return Object.assign({},$,i,t,{filepath:n})}{const{config:t={},filepath:n=""}=o.load(e)||{};return Object.assign({},$,i,t,{filepath:n})}}function x(e){return f.default.yellow(e)}function S(e){return f.default.red(e)}function b(e){return f.default.green(e)}function O(e={}){const{lastet:t,limit:n,branches:i}=e,o=["%H","%T","%P","%an","%ae","%al","%aL","%ad","%ar","%at","%aI","%as","%cn","%ce","%cl","%cL","%cd","%cr","%ct","%cI","%cs","%d","%D","%S","%e","%s"],r=l.default.exec(`git log${n?' -"'+n+'"':""}${t?' --since="'+function(e){const t=String(e).match(/^(\d+)([a-zA-Z]+)$/);let n;if(!t)return null;switch(n=+t[1],t[2]){case"m":n*=60;break;case"h":n*=3600;break;case"d":n*=86400;break;case"w":n*=604800;break;case"M":n*=2592e3;break;case"y":n*=31536e3}return parseInt(String(Date.now()/1e3-n))}(t)+'"':""}${i?' --branches="*'+i+'"':""} --date-order --pretty=format:"${o.join(",=")}-end-"`,{silent:!0}).stdout.replace(/[\r\n]+/g,"").replace(/-end-$/,"");let s=[];return r&&r.split("-end-").forEach((e=>{let t=e.split(",="),n={};o.forEach(((e,i)=>{n[e]=t[i]})),s.push(n)})),s}function I(){return l.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"")}function j(e){if(!e){let{root:t}=y();e=t}const t=p.default.resolve(e,"package.json"),n=u.default.readFileSync(t,"utf-8");return JSON.parse(n)}const{gitUrl:G}=function(e=process.cwd()){const t=l.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[n]=t.split("\n").map((e=>e.trim())).map(d.default);return{gitUrl:n,appName:n.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}(),{root:_}=y();function q(){const{author:e,homepage:t,version:n}=j();return`# Created by gitmars v${n} (${t})\n# author: ${e}\n# At: ${(new Date).toLocaleString()}\n# From: ${_} (${G})`}Object.defineProperty(exports,"__esModule",{value:!0});var w={isHusky:function(e){return e.indexOf("# husky")>-1||e.indexOf("#husky")>-1},isGitmars:function(e){return e.indexOf("# gitmars")>-1},isYorkie:function(e){return e.indexOf("#yorkie")>-1},isGhooks:function(e){return e.indexOf("// Generated by ghooks. Do not edit this file.")>-1},isPreCommit:function(e){return e.indexOf("./node_modules/pre-commit/hook")>-1}};const F=q();const E=I(),{gitHookDir:C,prefix:T}=y(),D=function(){let e=l.default.exec("git --version",{silent:!0}).stdout.replace(/\s*$/g,"").match(/[\d.?]+/g);return e?(e=e[0],e):(l.default.echo(x("没有找到git")),void l.default.exit(1))}(),A=k();function H(e=C){let t=p.default.join(e,"gitmars.sh");u.default.writeFileSync(t,function(){const e=j(),t=u.default.readFileSync(p.default.join(__dirname,"../../sh/gitmars.sh"),"utf-8").replace('gitmarsVersion="0.0.0"',`gitmarsVersion="${e.version}"`);return[q(),"",t].join("\n")}(),"utf-8"),u.default.chmodSync(t,493)}function P(e=C,t,n){let i=p.default.join(e,"gitmars.local.sh");u.default.writeFileSync(i,function(e,t){return`${F}\n\npackageManager=${e}\ncd "${t}"\n`}(t,n),"utf-8"),u.default.chmodSync(i,493)}function V(e=E,t="dev"){return l.default.exec(`git branch --contains ${e}`,{silent:!0}).stdout.replace(/[\s]*$/g,"").split("\n").includes(t)}function L({latest:e,limit:t,branch:n}){let i=!1,o=[],r=[];const s=O({latest:e,limit:t,branches:n}),a=O({latest:e,limit:t,branches:E});s.forEach((e=>{o.push(e["%H"])})),a.forEach((e=>{(e["%P"]?e["%P"].split(" "):[]).forEach((e=>{r.push(e)}))}));e:for(let e of o)if(r.includes(e)){i=!0;break e}return i}function M(){const e=O({limit:1,branches:E});return(e[0]["%P"]?e[0]["%P"].split(" "):[]).length>1}function N(){l.default.exec("git fetch",{silent:!0});const e=l.default.exec(`git log ${E}..origin/${E} --pretty=format:"%p"`,{silent:!0}).stdout.replace(/[\s]*$/g,"");return e?e.split("\n"):[]}function R(){const e=D&&function(e,t){if(null===e)return null;e+=".",t+=".";let n=parseFloat(e),i=parseFloat(t),o=parseFloat(e.replace(n+".",""))||0,r=parseFloat(t.replace(i+".",""))||0;return!(i>n)&&(i<n||o>=r)}(D,"2.13.0");g.default.isCI&&A.skipCI?console.info("持续集成环境，跳过钩子安装"):(u.default.existsSync(C)||u.default.mkdirSync(C),["1","true"].includes(process.env.GITMARS_SKIP_HOOKS||"")&&(l.default.echo(x("已存在环境变量GITMARS_SKIP_HOOKS，跳过安装")),process.exit(0)),e||(l.default.echo(x("Gitmars需要使用2.13.0以上版本的Git，当前版本："+D)),process.exit(0)),function(e=C){const t=(e,t)=>{u.default.writeFileSync(e,t,"utf-8"),u.default.chmodSync(e,493)};v.map((t=>p.default.join(e,t))).forEach((e=>{const n=`#!/bin/sh\n# gitmars\n\n${q()}\n\n. "$(dirname "$0")/gitmars.sh"`,i=p.default.basename(e);if(u.default.existsSync(e)){const o=u.default.readFileSync(e,"utf-8");return w.isGhooks(o)?(console.info(`合并已存在的ghooks钩子: ${i}`),t(e,n)):w.isPreCommit(o)?(console.info(`合并已存在的pre-commit钩子: ${i}`),t(e,n)):w.isGitmars(o)||w.isHusky(o)||w.isYorkie(o)?t(e,n):void console.info(`跳过已存在的用户git钩子: ${i}`)}t(e,n)}))}(C),H(C),P(C,"yarn",T),console.info("gitmars hooks init down"))}function K(){!function(e=C){v.map((t=>p.default.join(e,t))).filter((e=>{if(u.default.existsSync(e)){const t=u.default.readFileSync(e,"utf-8");return w.isGitmars(t)}return!1})).forEach((e=>{u.default.unlinkSync(e)}))}(),function(e=C){const t=p.default.join(e,"gitmars.sh");u.default.existsSync(t)&&u.default.unlinkSync(t)}(),function(e=C){const t=p.default.join(e,"gitmars.local.sh");u.default.existsSync(t)&&u.default.unlinkSync(t)}(),console.info("gitmars hooks removed")}l.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(l.default.echo(S("当前目录不是git项目目录")),l.default.exit(1));const U=k();e.program.name("gitm hook").usage("[command]").description("git hook钩子"),m.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let n=e.name;e.variadic&&(n+="..."),n=e.required?"<"+n+">":"["+n+"]",t.push(n)})),t.join(" ")}(m)),h.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action((async(e,t,n)=>{if(console.log("gitmars hooks is running"),n.noVerify)l.default.exit(0);else{if("init"===e)R();else if("remove"===e)K();else{n.type=n.type?n.type.split(","):[];const e=[U.master,U.develop,U.release,U.support,U.bugfix],t=I();if(t.split("/")[0],console.log(n.type,process.env,process.argv,function(e,t=!1){const n=l.default.exec(`git branch ${t?"-r":""} --contains ${e} --format="%(refname:short)`,{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");return n?n.split("\n"):[]}("2080d17e")),t!==U.develop&&e.includes(t)&&n.type.includes("1")){const[e,t]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[];if("merge"===e){V(t,U.develop)?console.info(b(t+"合并过"+U.develop)):(console.info(S("检测到你的分支没有合并过"+U.develop)),l.default.exit(0))}}if(e.includes(t)&&n.type.includes("2")){const[e,t]=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[],i=t.split("/")[0];if("merge"===e){L({latest:n.latest,branch:t})?console.info(b(t+"一周内同步过主干分支代码")):(console.info(S("检测到你1周内没有同步过主干"+i+"分支代码")),l.default.exit(0))}}if(e.includes(t)&&n.type.includes("3")){M()?console.info(b("最后一条记录是merge记录")):(console.info(S("检测到你直接在主干分支修改代码")),l.default.exit(0))}if(e.includes(t)&&n.type.includes("4")){N().length?console.info(b("本地版本没有落后远程，可直接push")):(console.info("你本地分支版本落后于远程分支，请先执行pull"),l.default.exit(0))}}l.default.exit(0)}})),e.program.parse(process.argv);
