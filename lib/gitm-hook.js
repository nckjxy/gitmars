#!/usr/bin/env node
"use strict";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!=="undefined"&&arr[Symbol.iterator]||arr["@@iterator"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}var program=require("commander");var sh=require("shelljs");var _require=require("./conf/hook"),options=_require.options,args=_require.args;var _require2=require("./js/index"),error=_require2.error,warning=_require2.warning,success=_require2.success,getCurrent=_require2.getCurrent,getBranchsFromID=_require2.getBranchsFromID;var _require3=require("./js/tools"),createArgs=_require3.createArgs;var _require4=require("./js/hook"),init=_require4.init,remove=_require4.remove,getIsMergedBranch=_require4.getIsMergedBranch,getIsUpdatedInTime=_require4.getIsUpdatedInTime,getIsMergeAction=_require4.getIsMergeAction,getBehandLogs=_require4.getBehandLogs,getAheadLogs=_require4.getAheadLogs;var config=require("./js/getConfig")();program.name("gitm hook").usage("[command]").description("git hook钩子");if(args.length>0)program.arguments(createArgs(args));options.forEach(function(o){program.option(o.flags,o.description,o.defaultValue)});program.action(function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee(command,args,opt){var mainBranchs,current,currentPrefix,isMergedBranch,_ref2,_ref3,_command,_branch,branchPrefix,isUpdatedInTime,isMergeAction,behandLogs;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log("gitmars hooks is running");if(!opt.noVerify){_context.next=4;break}sh.exit(0);return _context.abrupt("return");case 4:if(command==="init"){init()}else if(command==="remove"){remove()}else{opt.type=opt.type?opt.type.split(","):[];mainBranchs=[config.master,config.develop,config.release,config.support,config.bugfix];current=getCurrent();currentPrefix=current.split("/")[0];console.log(opt.type,process.env,process.argv,getBranchsFromID("2080d17e"));if(current!==config.develop&&mainBranchs.includes(current)&&opt.type.includes("1")){if(command==="merge"){isMergedBranch=getIsMergedBranch(branch,config.develop);if(!isMergedBranch){console.info(error("检测到你的分支没有合并过"+config.develop));sh.exit(0)}else{console.info(success(branch+"合并过"+config.develop))}}}if(mainBranchs.includes(current)&&opt.type.includes("2")){_ref2=process.env.GIT_REFLOG_ACTION?process.env.GIT_REFLOG_ACTION.split(" "):[],_ref3=_slicedToArray(_ref2,2),_command=_ref3[0],_branch=_ref3[1];branchPrefix=_branch.split("/")[0];if(_command==="merge"){isUpdatedInTime=getIsUpdatedInTime({latest:opt.latest,branch:_branch});if(!isUpdatedInTime){console.info(error("检测到你1周内没有同步过主干"+branchPrefix+"分支代码"));sh.exit(0)}else{console.info(success(_branch+"一周内同步过主干分支代码"))}}}if(mainBranchs.includes(current)&&opt.type.includes("3")){isMergeAction=getIsMergeAction();if(!isMergeAction){console.info(error("检测到你直接在主干分支修改代码"));sh.exit(0)}else{console.info(success("最后一条记录是merge记录"))}}if(mainBranchs.includes(current)&&opt.type.includes("4")){behandLogs=getBehandLogs();if(!behandLogs.length){console.info("你本地分支版本落后于远程分支，请先执行pull");sh.exit(0)}else{console.info(success("本地版本没有落后远程，可直接push"))}}}sh.exit(0);case 6:case"end":return _context.stop()}}},_callee)}));return function(_x,_x2,_x3){return _ref.apply(this,arguments)}}());program.parse(process.argv);