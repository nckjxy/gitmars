#!/usr/bin/env node
"use strict";"undefined"!=typeof require&&require;const{program:e}=require("commander"),i=require("shelljs"),{options:t,args:c}=require("./conf/end"),{error:s,queue:g,getStatus:r,getCurrent:n,searchBranch:a,isGitProject:o}=require("./js/index"),{createArgs:u}=require("./js/tools");o()||(i.echo(s("当前目录不是git项目目录")),i.exit(1));const $=require("./js/getConfig"),l=require("./js/getGitConfig"),{getUserToken:f}=require("./js/api"),{defaults:p}=require("./js/global"),h=$(),{appName:m}=l();e.name("gitm end").usage("[type] [name]").description("合并bugfix任务分支、合并feature功能开发分支，合并完成后将删除对应分支"),c.length>0&&e.arguments(u(c)),t.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action(((e,t)=>{return c=void 0,o=null,u=function*(){const c=["bugfix","feature","support"],o=[p.master,p.develop,p.release,p.bugfix,p.support],{token:u,level:$,nickname:l=""}=h.api?f():{};if(r()||i.exit(1),e){if(!t){c.includes(e)&&(i.echo("请输入分支名称"),i.exit(1));const g=yield a(e);1===g.length?[e,t]=g[0].split("/"):(i.echo(g.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:s("分支不存在，请正确输入")),i.exit(1))}}else[e,t]=n().split("/"),t||(o.includes(e)&&i.echo(s(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),i.exit(1));if(c.includes(e)&&t){const i="bugfix"===e?h.bugfix:h.release;let c=["git fetch",`git checkout ${h.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${h.develop}成功`,fail:`${e}/${t}合并到${h.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`];"support"===e&&(c=c.concat(!$||$<3?["git fetch",`git checkout ${h.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${h.bugfix}成功`,fail:`${e}/${t}合并到${h.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${h.bugfix}\\",\\"private_token\\":\\"${u}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${h.bugfix}'\\"}" "${h.gitHost}/api/v4/projects/${h.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${l}在${m}项目提交了${e}/${t}分支合并到${h.bugfix}分支的merge请求"`])),c=c.concat(!$||$<3?["git fetch",`git checkout ${i}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{again:!1,success:`${e}/${t}合并到${i}成功`,fail:`${e}/${t}合并到${i}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git branch -D ${e}/${t}`,{cmd:`git push origin --delete ${e}/${t}`,config:{again:!0,success:"成功删除远程分支",fail:"删除失败，请联系管理员"}},`git checkout ${h.develop}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${i}\\",\\"private_token\\":\\"${u}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${i}'\\"}" "${h.gitHost}/api/v4/projects/${h.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${l}在${m}项目提交了${e}/${t}分支合并到${i}分支的merge请求"`]),g(c)}else i.echo(s("type只允许输入："+JSON.stringify(c))),i.exit(1)},new Promise(((e,i)=>{var t=e=>{try{g(u.next(e))}catch(e){i(e)}},s=e=>{try{g(u.throw(e))}catch(e){i(e)}},g=i=>i.done?e(i.value):Promise.resolve(i.value).then(t,s);g((u=u.apply(c,o)).next())}));var c,o,u})),e.parse(process.argv);
