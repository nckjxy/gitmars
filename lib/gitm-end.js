#!/usr/bin/env node
"use strict";function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!=="undefined"&&arr[Symbol.iterator]||arr["@@iterator"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{Promise.resolve(value).then(_next,_throw)}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(undefined)})}}var program=require("commander");var sh=require("shelljs");var _require=require("./conf/end"),options=_require.options,args=_require.args;var _require2=require("./js/index"),error=_require2.error,queue=_require2.queue,getStatus=_require2.getStatus,getCurrent=_require2.getCurrent,searchBranch=_require2.searchBranch;var _require3=require("./js/tools"),createArgs=_require3.createArgs;var config=require("./js/getConfig")();var _require4=require("./js/api"),getUserToken=_require4.getUserToken;var _require5=require("./js/global"),defaults=_require5.defaults;program.name("gitm end").usage("[type] [name]").description("合并bugfix任务分支、合并feature功能开发分支，合并完成后将删除对应分支");if(args.length>0)program.arguments(createArgs(args));options.forEach(function(o){program.option(o.flags,o.description,o.defaultValue)});program.action(function(){var _ref=_asyncToGenerator(regeneratorRuntime.mark(function _callee(type,name,opt){var allow,deny,_ref2,token,level,status,_getCurrent$split,_getCurrent$split2,branchs,_branchs$0$split,_branchs$0$split2,base,cmd;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:allow=["bugfix","feature","support"];deny=[defaults.master,defaults.develop,defaults.release,defaults.bugfix,defaults.support];_ref2=config.api?getUserToken():{},token=_ref2.token,level=_ref2.level;status=getStatus();if(!status)sh.exit(1);if(type){_context.next=14;break};_getCurrent$split=getCurrent().split("/");_getCurrent$split2=_slicedToArray(_getCurrent$split,2);type=_getCurrent$split2[0];name=_getCurrent$split2[1];if(!name){deny.includes(type)&&sh.echo(error("骚年，你在".concat(type,"分支执行这个指令是什么骚操作？")));sh.exit(1)}_context.next=20;break;case 14:if(name){_context.next=20;break}if(allow.includes(type)){sh.echo("请输入分支名称");sh.exit(1)}_context.next=18;return searchBranch(type);case 18:branchs=_context.sent;if(branchs.length===1){_branchs$0$split=branchs[0].split("/");_branchs$0$split2=_slicedToArray(_branchs$0$split,2);type=_branchs$0$split2[0];name=_branchs$0$split2[1]}else{sh.echo(branchs.length>1?"查询到多条名称包含".concat(type,"的分支，请输入分支类型"):error("分支不存在，请正确输入"));sh.exit(1)}case 20:if(allow.includes(type)&&name){base=type==="bugfix"?config.bugfix:config.release,cmd=["git fetch","git checkout ".concat(config.develop),"git pull",{cmd:"git merge --no-ff ".concat(type,"/").concat(name),config:{slient:false,again:false,success:"".concat(type,"/").concat(name,"合并到").concat(config.develop,"成功"),fail:"".concat(type,"/").concat(name,"合并到").concat(config.develop,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},"git checkout ".concat(type,"/").concat(name)];if(type==="support"){cmd=cmd.concat(!level||level<3?["git fetch","git checkout ".concat(config.bugfix),"git pull",{cmd:"git merge --no-ff ".concat(type,"/").concat(name),config:{slient:false,again:false,success:"".concat(type,"/").concat(name,"合并到").concat(config.bugfix,"成功"),fail:"".concat(type,"/").concat(name,"合并到").concat(config.bugfix,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},"git checkout ".concat(type,"/").concat(name)]:[{cmd:"git push --set-upstream origin ".concat(type,"/").concat(name),config:{slient:false,again:true,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(type,"/").concat(name,'\'","target_branch":"\'').concat(config.bugfix,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(type,"/").concat(name,"' into '").concat(config.bugfix,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}])}cmd=cmd.concat(!level||level<3?["git fetch","git checkout ".concat(base),"git pull",{cmd:"git merge --no-ff ".concat(type,"/").concat(name),config:{slient:false,again:false,success:"".concat(type,"/").concat(name,"合并到").concat(base,"成功"),fail:"".concat(type,"/").concat(name,"合并到").concat(base,"出错了，请根据提示处理")}},{cmd:"git push",config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},"git branch -D ".concat(type,"/").concat(name),"git checkout ".concat(config.develop)]:[{cmd:"git push --set-upstream origin ".concat(type,"/").concat(name),config:{slient:false,again:true,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:'curl -i -H "Content-Type: application/json" -X POST -d \'{"source_branch":"\''.concat(type,"/").concat(name,'\'","target_branch":"\'').concat(base,'\'","private_token":"\'').concat(token,'\'","title":"Merge branch \'').concat(type,"/").concat(name,"' into '").concat(base,"'\"}' \"").concat(config.gitHost,"/api/v4/projects/").concat(config.gitID,'/merge_requests"'),config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}}]);queue(cmd)}else{sh.echo(error("type只允许输入："+JSON.stringify(allow)));sh.exit(1)}case 21:case"end":return _context.stop()}}},_callee)}));return function(_x,_x2,_x3){return _ref.apply(this,arguments)}}());program.parse(process.argv);