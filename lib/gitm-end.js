#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),i=require("fs"),s=require("colors"),a=require("slash"),c=require("cosmiconfig");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=n(t),l=n(i),o=n(s),u=n(a);const g=[{required:!1,name:"type",variadic:!1,description:"分支类型"},{required:!1,name:"name",variadic:!1,description:"分支名称(不带feature/bugfix前缀)"}],f=[];function p(e=process.cwd()){const t=r.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i]=t.split("\n").map((e=>e.trim())).map(u.default);return{gitUrl:i,appName:i.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}function d(e=process.cwd()){const t=r.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i,s,a,c,n=""]=t.split("\n").map((e=>e.trim())).map(u.default);return{prefix:s||".",gitCommonDir:a,root:i,gitDir:c,gitHookDir:c+"/hooks",cdup:n}}const m={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function $(e,t="gitmars"){let i;if(!e){let{root:t}=d();try{e=t+"/gitmarsconfig.json",i=l.default.statSync(e)}catch(i){e=t}}const s={skipCI:!0},a=c.cosmiconfigSync(t);if(i||(i=l.default.statSync(e)),i.isDirectory()){const{config:t={},filepath:i=""}=a.search(e)||{};return Object.assign({},m,s,t,{filepath:i})}{const{config:t={},filepath:i=""}=a.load(e)||{};return Object.assign({},m,s,t,{filepath:i})}}function h(e){return o.default.yellow(e)}function b(e){return o.default.red(e)}function x(e,t){0!==e.length?t(e[0],((i=!1)=>{i||(e.shift(),x(e,t))})):t()}function k(e){return new Promise(((t,i)=>{let s=[];0===e.length&&i("指令名称不能为空"),x(e=JSON.parse(JSON.stringify(e)),((i,a)=>{let c={silent:!0,postmsg:!1,kill:!0,again:!1},n=i;i instanceof Object&&(c=Object.assign(c,i.config||{}),n=i.cmd),n?r.default.exec(n,c,((t,l,u)=>{let g=function(e){let t={},i=e.replace(/[\s]+/g," ").split(" ");if(i.length<2||"git"!==i[0])return t;switch(i[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(n);try{l=JSON.parse(l)}catch(u){l=l.replace(/\n*$/g,"")}if(s.push({code:t,out:l,err:u,cfg:c,cmd:n}),0!==t&&function(e){const{gitDir:t}=d();r.default.touch(t+"/.gitmarslog"),r.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:i,code:t,out:l,err:u}),0!==t&&c.kill){let t=JSON.parse(JSON.stringify(e));c.again?!0!==c.again&&t.splice(0,1,c.again):t.shift(),a(!0),function(e){const{gitDir:t}=d();r.default.touch(t+"/.gitmarscommands"),r.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),c.silent&&r.default.echo(b(u)),r.default.echo(b(c.fail||g.fail||"出错了！指令 "+n+" 执行失败，中断了进程")),c.postmsg&&y("出错了！指令 "+n+" 执行失败，中断了进程"),t.length>0&&r.default.echo(b("请处理相关问题之后输入gitm continue继续")),r.default.exit(1)}else{if(0===t){let e=c.success||g.success;e&&(r.default.echo((f=e,o.default.green(f))),c.postmsg&&y(e))}else{let e=c.fail||g.fail||"指令 "+n+" 执行失败";e&&r.default.echo(h(e))}a()}var f})):t(s)}))}))}function v(){let e=function(e={}){const{silent:t=!0}=e,i=r.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let s=i?i.replace(/\n(\s+)/g,"\n").split("\n"):[],a={A:[],D:[],M:[],"??":[]};return 0===s.length||s.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),i=t.splice(0,1);a[i]||(a[i]=[]),a[i].push(t.join(" "))})),a}({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(r.default.echo(b("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),r.default.exit(1),!1):(e["??"].length>0&&r.default.echo(h("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}function y(e=""){const t=$();if(!t.msgTemplate)return void r.default.echo(b("请配置消息发送api模板地址"));let i=(s=t.msgTemplate,a=t=>"message"===t?e:function(e){const{root:t}=d(),{appName:i}=p(),s=$();let a="",c=new Date;switch(e){case"time":a=c;break;case"timeNum":a=c.getTime();break;case"pwd":a=t;break;case"project":a=i;break;case"user":a=s.user}return a}(t),s&&a?""+s.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof a)return a(t);for(let e in a)if(t===e)return a[e]})):null);var s,a;t.msgUrl&&function(e="",t={}){const i=$(),{silent:s=!0}=t;if(!i.msgUrl)return void r.default.echo(b("请配置消息推送地址"));e=e.replace(/\s/g,""),i.msgUrl&&r.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${i.msgUrl}"`,{silent:s})}(i)}function S(){const e=$();e.api||(r.default.echo(b("请配置用于请求权限的api接口地址，接收参数形式：url?name=git_user_name，返回data=token")),process.exit(1));const t=r.default.exec("git config user.name",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");t||(r.default.echo(b("请设置本地git用户名")),process.exit(1));let i,s=r.default.exec(`curl -s ${e.api}?name=${t}`,{silent:!0}).stdout;try{s=JSON.parse(s),i=s.data||null}catch(e){i=null}return i?i.token||(r.default.echo(b("请设置access_token")),process.exit(1)):(r.default.echo(b("没有找到用户，请联系管理员")),process.exit(1)),i}r.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(r.default.echo(b("当前目录不是git项目目录")),r.default.exit(1));const j=$(),{appName:O}=p();e.program.name("gitm end").usage("[type] [name]").description("合并bugfix任务分支、合并feature功能开发分支，合并完成后将删除对应分支"),g.length>0&&e.program.arguments(function(e){let t=[];return e.forEach((e=>{let i=e.name;e.variadic&&(i+="..."),i=e.required?"<"+i+">":"["+i+"]",t.push(i)})),t.join(" ")}(g)),f.forEach((t=>{e.program.option(t.flags,t.description,t.defaultValue)})),e.program.action((async(e,t,i)=>{const s=["bugfix","feature","support"],a=[m.master,m.develop,m.release,m.bugfix,m.support],{token:c,level:n,nickname:l=""}=j.api?S():{};if(v()||r.default.exit(1),e){if(!t){s.includes(e)&&(r.default.echo("请输入分支名称"),r.default.exit(1));let i=await async function(e,t,i=!1){const s=(await k([`gitm branch${e?" -k "+e:""}${t?" -t "+t:""}${i?" -r":""}`]))[0].out.replace(/^\*\s+/,"");let a=s?s.split("\n"):[];return a=a.map((e=>e.trim())),a}(e);1===i.length?[e,t]=i[0].split("/"):(r.default.echo(i.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:b("分支不存在，请正确输入")),r.default.exit(1))}}else[e,t]=r.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"").split("/"),t||(a.includes(e)&&r.default.echo(b(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),r.default.exit(1));if(s.includes(e)&&t){let i="bugfix"===e?j.bugfix:j.release,s=["git fetch",`git checkout ${j.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${j.develop}成功`,fail:`${e}/${t}合并到${j.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`];"support"===e&&(s=s.concat(!n||n<3?["git fetch",`git checkout ${j.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${j.bugfix}成功`,fail:`${e}/${t}合并到${j.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${j.bugfix}\\",\\"private_token\\":\\"${c}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${j.bugfix}'\\"}" "${j.gitHost}/api/v4/projects/${j.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${l}在${O}项目提交了${e}/${t}分支合并到${j.bugfix}分支的merge请求"`])),s=s.concat(!n||n<3?["git fetch",`git checkout ${i}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${i}成功`,fail:`${e}/${t}合并到${i}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git branch -D ${e}/${t}`,{cmd:`git push origin --delete ${e}/${t}`,config:{slient:!1,again:!0,success:"成功删除远程分支",fail:"删除失败，请联系管理员"}},`git checkout ${j.develop}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${i}\\",\\"private_token\\":\\"${c}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${i}'\\"}" "${j.gitHost}/api/v4/projects/${j.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${l}在${O}项目提交了${e}/${t}分支合并到${i}分支的merge请求"`]),k(s)}else r.default.echo(b("type只允许输入："+JSON.stringify(s))),r.default.exit(1)})),e.program.parse(process.argv);
