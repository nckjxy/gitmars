#!/usr/bin/env node
"use strict";const{program:e}=require("commander"),i=require("shelljs"),{options:t,args:s}=require("./conf/end"),{error:c,queue:g,getStatus:n,getCurrent:a,searchBranch:r,isGitProject:o}=require("./js/index"),{createArgs:u}=require("./js/tools");o()||(i.echo(c("当前目录不是git项目目录")),i.exit(1));const $=require("./js/getConfig"),l=require("./js/getGitConfig"),{getUserToken:f}=require("./js/api"),{defaults:p}=require("./js/global"),h=$(),{appName:m}=l();e.name("gitm end").usage("[type] [name]").description("合并bugfix任务分支、合并feature功能开发分支，合并完成后将删除对应分支"),s.length>0&&e.arguments(u(s)),t.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action((async(e,t,s)=>{const o=["bugfix","feature","support"],u=[p.master,p.develop,p.release,p.bugfix,p.support],{token:$,level:l,nickname:d=""}=h.api?f():{};if(n()||i.exit(1),e){if(!t){o.includes(e)&&(i.echo("请输入分支名称"),i.exit(1));let s=await r(e);1===s.length?[e,t]=s[0].split("/"):(i.echo(s.length>1?`查询到多条名称包含${e}的分支，请输入分支类型`:c("分支不存在，请正确输入")),i.exit(1))}}else[e,t]=a().split("/"),t||(u.includes(e)&&i.echo(c(`骚年，你在${e}分支执行这个指令是什么骚操作？`)),i.exit(1));if(o.includes(e)&&t){let i="bugfix"===e?h.bugfix:h.release,s=["git fetch",`git checkout ${h.develop}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${h.develop}成功`,fail:`${e}/${t}合并到${h.develop}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`];"support"===e&&(s=s.concat(!l||l<3?["git fetch",`git checkout ${h.bugfix}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${h.bugfix}成功`,fail:`${e}/${t}合并到${h.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${e}/${t}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${h.bugfix}\\",\\"private_token\\":\\"${$}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${h.bugfix}'\\"}" "${h.gitHost}/api/v4/projects/${h.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${d}在${m}项目提交了${e}/${t}分支合并到${h.bugfix}分支的merge请求"`])),s=s.concat(!l||l<3?["git fetch",`git checkout ${i}`,"git pull",{cmd:`git merge --no-ff ${e}/${t}`,config:{slient:!1,again:!1,success:`${e}/${t}合并到${i}成功`,fail:`${e}/${t}合并到${i}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git branch -D ${e}/${t}`,{cmd:`git push origin --delete ${e}/${t}`,config:{slient:!1,again:!0,success:"成功删除远程分支",fail:"删除失败，请联系管理员"}},`git checkout ${h.develop}`]:[{cmd:`git push --set-upstream origin ${e}/${t}`,config:{slient:!1,again:!0,success:"推送远程并关联远程分支成功",fail:"推送远程失败，请根据提示处理"}},{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${e}/${t}\\",\\"target_branch\\":\\"${i}\\",\\"private_token\\":\\"${$}\\",\\"title\\":\\"Merge branch '${e}/${t}' into '${i}'\\"}" "${h.gitHost}/api/v4/projects/${h.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${d}在${m}项目提交了${e}/${t}分支合并到${i}分支的merge请求"`]),g(s)}else i.echo(c("type只允许输入："+JSON.stringify(o))),i.exit(1)})),e.parse(process.argv);
