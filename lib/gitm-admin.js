#!/usr/bin/env node
const program=require("commander");const sh=require("shelljs");const{create,publish,update,clean}=require("./conf/admin");const{getUserToken}=require("./js/api");const{error,success,queue,getStatus,checkBranch,getCurrent}=require("./js/index");const{createArgs}=require("./js/tools");const{appName}=require("./js/getGitConfig")();const config=require("./js/getConfig")();const{token,level,nickname=""}=config.api?getUserToken():{};if(create.args.length>0){let _program=program.name("gitm admin").usage("<command> <type>").description("创建bugfix、release、develop和support分支").command("create "+createArgs(create.args));create.options.forEach(o=>{_program.option(o.flags,o.description,o.defaultValue)});_program.action(async type=>{const opts=["bugfix","release","develop","support"];let base=type==="release"?config.master:config.release,status=getStatus(),hasBase=await checkBranch(base),exits=await checkBranch(config[type]);if(!status)sh.exit(1);if(!hasBase){sh.echo(error(base+"分支不存在，请先创建"+base+"分支"));sh.exit(1)}if(exits){sh.echo(error(config[type]+"分支已存在，不需要重复创建"));sh.exit(1)}if(opts.includes(type)){let cmd=[`git fetch`,`git checkout ${base}`,`git pull`,`git checkout -b ${config[type]} ${base}`];queue(cmd).then(data=>{if(data[3].code===0){sh.echo(`${config[type]}\u5206\u652F\u521B\u5EFA\u6210\u529F\uFF0C\u8BE5\u5206\u652F\u57FA\u4E8E${base}\u521B\u5EFA\uFF0C\u60A8\u5F53\u524D\u5DF2\u7ECF\u5207\u6362\u5230${config[type]}
\u9700\u8981\u53D1\u7248\u65F6\uFF0C\u8BB0\u5F97\u6267\u884C: ${success("gitm admin publish "+config[type])}`)}})}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}if(publish.args.length>0){let _program=program.name("gitm admin").usage("<command> <type>").description("发布bugfix、release、support分支").command("publish "+createArgs(publish.args));publish.options.forEach(o=>{_program.option(o.flags,o.description,o.defaultValue)});_program.action(async(type,opt)=>{const opts=["bugfix","release","support"];let status=getStatus(),curBranch=await getCurrent();if(!status)sh.exit(1);if(opts.includes(type)){let cmd=!level||level<3?{bugfix:[`git fetch`,`git checkout ${config.bugfix}`,`git pull`,`git checkout ${config.release}`,`git pull`,{cmd:`git merge --no-ff ${config.bugfix}`,config:{slient:false,again:false,postmsg:opt.postmsg,success:`${config.bugfix}\u5408\u5E76\u5230${config.release}\u6210\u529F`,fail:`${config.bugfix}\u5408\u5E76\u5230${config.release}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}],support:[`git fetch`,`git checkout ${config.support}`,`git pull`,`git checkout ${config.release}`,`git pull`,{cmd:`git merge --no-ff ${config.support}`,config:{slient:false,again:false,success:`${config.support}\u5408\u5E76\u5230${config.release}\u6210\u529F`,fail:`${config.support}\u5408\u5E76\u5230${config.release}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${config.bugfix}`,`git pull`,{cmd:`git merge --no-ff ${config.support}`,config:{slient:false,again:false,success:`${config.support}\u5408\u5E76\u5230${config.bugfix}\u6210\u529F`,fail:`${config.support}\u5408\u5E76\u5230${config.bugfix}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}],release:[`git fetch`,`git checkout ${config.release}`,`git pull`,`git checkout ${config.master}`,`git pull`,{cmd:`git merge --no-ff ${config.release}`,config:{slient:false,again:false,success:`${config.release}\u5408\u5E76\u5230${config.master}\u6210\u529F`,fail:`${config.release}\u5408\u5E76\u5230${config.master}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}:{bugfix:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.bugfix}\\",\\"target_branch\\":\\"${config.release}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.bugfix}' into '${config.release}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.bugfix}\u5206\u652F\u5408\u5E76\u5230${config.release}\u5206\u652F\u7684merge\u8BF7\u6C42"`],support:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.support}\\",\\"target_branch\\":\\"${config.release}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.support}' into '${config.release}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.support}\u5206\u652F\u5408\u5E76\u5230${config.release}\u5206\u652F\u7684merge\u8BF7\u6C42"`,{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.support}\\",\\"target_branch\\":\\"${config.bugfix}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.support}' into '${config.bugfix}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.support}\u5206\u652F\u5408\u5E76\u5230${config.bugfix}\u5206\u652F\u7684merge\u8BF7\u6C42"`],release:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.release}\\",\\"target_branch\\":\\"${config.master}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.release}' into '${config.master}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.release}\u5206\u652F\u5408\u5E76\u5230${config.master}\u5206\u652F\u7684merge\u8BF7\u6C42"`]};if(type==="bugfix"&&opt.prod){cmd[type]=cmd[type].concat(!level||level<3?[`git checkout ${config.master}`,`git pull`,{cmd:`git merge --no-ff ${config.bugfix}`,config:{slient:false,again:false,success:`${config.bugfix}\u5408\u5E76\u5230${config.master}\u6210\u529F`,fail:`${config.bugfix}\u5408\u5E76\u5230${config.master}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.bugfix}\\",\\"target_branch\\":\\"${config.master}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.bugfix}' into '${config.master}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.bugfix}\u5206\u652F\u5408\u5E76\u5230${config.master}\u5206\u652F\u7684merge\u8BF7\u6C42"`]);if(opt.build&&(!level||level<3)){cmd[type]=cmd[type].concat([{cmd:`gitm build ${appName} --env bug --app ${opt.build===true?"all":opt.build}`,config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}}if(type==="release"&&opt.build&&(!level||level<3)){cmd[type]=cmd[type].concat([{cmd:`gitm build ${appName} --env prod --app ${opt.build===true?"all":opt.build}`,config:{slient:true,again:false,success:"调起构建成功",fail:"调起构建失败"}}])}if(type==="release"&&opt.combine){if(opt.useRebase){cmd[type]=cmd[type].concat([`git checkout ${config.release}`,`git pull`,`git checkout ${config.bugfix}`,{cmd:`git pull origin ${config.bugfix} --rebase`,config:{slient:false,again:true}},{cmd:`git rebase ${config.release}`,config:{slient:false,again:false,postmsg:opt.postmsg,success:`${config.release}\u540C\u6B65\u5230${config.bugfix}\u6210\u529F`,fail:`${config.release}\u540C\u6B65\u5230${config.bugfix}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}])}else{cmd[type]=cmd[type].concat(!level||level<3?[`git checkout ${config.release}`,`git pull`,`git checkout ${config.bugfix}`,`git pull`,{cmd:`git merge --no-ff ${config.release}`,config:{slient:false,again:false,postmsg:opt.postmsg,success:`${config.release}\u5408\u5E76\u5230${config.bugfix}\u6210\u529F`,fail:`${config.release}\u5408\u5E76\u5230${config.bugfix}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${config.release}\\",\\"target_branch\\":\\"${config.bugfix}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${config.release}' into '${config.bugfix}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${config.release}\u5206\u652F\u5408\u5E76\u5230${config.bugfix}\u5206\u652F\u7684merge\u8BF7\u6C42"`])}}for(let key in cmd){cmd[key].push(`git checkout ${curBranch}`)}queue(cmd[type])}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}if(update.args.length>0){let _program=program.name("gitm admin").usage("<command> <type> [-m --mode [mode]]").description("更新bugfix、release、support分支代码").command("update "+createArgs(update.args));update.options.forEach(o=>{_program.option(o.flags,o.description,o.defaultValue)});_program.action((type,opt)=>{const opts=["bugfix","release","support"];let base=type==="release"?config.master:config.release,mode="",status=getStatus();if(!status)sh.exit(1);if(opt.mode===1){mode=" --strategy-option ours"}else if(opt.mode===2){mode=" --strategy-option theirs"}if(opts.includes(type)){let cmd=!level||level<3?[`git fetch`,`git checkout ${base}`,`git pull`,`git checkout ${config[type]}`,{cmd:`git pull`,config:{slient:false,again:true}},{cmd:`git merge --no-ff ${base}${mode}`,config:{slient:false,again:false,postmsg:opt.postmsg,success:`${base}\u540C\u6B65\u5230${config[type]}\u6210\u529F`,fail:`${base}\u540C\u6B65\u5230${config[type]}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${base}\\",\\"target_branch\\":\\"${config[type]}\\",\\"private_token\\":\\"${token}\\",\\"title\\":\\"Merge branch '${base}' into '${config[type]}'\\"}" "${config.gitHost}/api/v4/projects/${config.gitID}/merge_requests"`,config:{slient:false,again:true,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${nickname}\u5728${appName}\u9879\u76EE\u63D0\u4EA4\u4E86${base}\u5206\u652F\u5408\u5E76\u5230${config[type]}\u5206\u652F\u7684merge\u8BF7\u6C42"`];if(opt.useRebase){cmd=[`git fetch`,`git checkout ${base}`,`git pull`,`git checkout ${config[type]}`,{cmd:`git pull origin ${config[type]} --rebase`,config:{slient:false,again:true}},{cmd:`git rebase ${base}`,config:{slient:false,again:false,postmsg:opt.postmsg,success:`${base}\u540C\u6B65\u5230${config[type]}\u6210\u529F`,fail:`${base}\u540C\u6B65\u5230${config[type]}\u51FA\u9519\u4E86\uFF0C\u8BF7\u6839\u636E\u63D0\u793A\u5904\u7406`}},{cmd:`git push`,config:{slient:false,again:true,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}queue(cmd)}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}if(clean.args.length>0){let _program=program.name("gitm admin").usage("<command> <type>").description("构建清理工作").command("clean "+createArgs(clean.args));clean.options.forEach(o=>{_program.option(o.flags,o.description,o.defaultValue)});_program.action(type=>{const opts=["bugfix","release","develop","master"];let status=getStatus();if(!status)sh.exit(1);if(opts.includes(type)){let cmd=[`git fetch`,`git checkout . -f`,`git clean -fd`,`git checkout ${config.master}`,`git branch -D ${config[type]}`,`git fetch`,`git checkout ${config[type]}`,`git pull`];if(type==="master")cmd=[`git checkout .`,`git clean -fd`,`git checkout ${config.master}`,`git clean -fd`,`git fetch`,`git pull`];queue(cmd)}else{sh.echo(error("type只允许输入："+opts.join(",")));sh.exit(1)}})}program.parse(process.argv);