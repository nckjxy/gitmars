#!/usr/bin/env node
"use strict";"undefined"!=typeof require&&require;var e=(e,i,t)=>new Promise(((s,c)=>{var a=e=>{try{o(t.next(e))}catch(e){c(e)}},g=e=>{try{o(t.throw(e))}catch(e){c(e)}},o=e=>e.done?s(e.value):Promise.resolve(e.value).then(a,g);o((t=t.apply(e,i)).next())}));const{Command:i}=require("commander"),t=require("shelljs"),{create:s,publish:c,update:a,clean:g}=require("./conf/admin"),o=require("./js/api"),{error:r,success:n,queue:u,getStatus:l,checkBranch:p,getCurrent:$,isGitProject:f}=require("./js/index"),{createArgs:m}=require("./js/tools");f()||(t.echo(r("当前目录不是git项目目录")),t.exit(1));const d=require("./js/getGitConfig"),h=require("./js/getConfig"),{appName:b}=d(),x=h(),{token:k,level:v,nickname:_=""}=x.api?o():{},j=new i;if(s.args.length>0){const i=j.name("gitm admin").usage("<command> <type>").description("创建bugfix、release、develop和support分支").command("create "+m(s.args));s.options.forEach((e=>{i.option(e.flags,e.description,e.defaultValue)})),i.action((i=>e(void 0,null,(function*(){const e=["bugfix","release","develop","support"],s="release"===i?x.master:x.release,c=l(),a=yield p(s),g=yield p(x[i]);if(c||t.exit(1),a||(t.echo(r(s+"分支不存在，请先创建"+s+"分支")),t.exit(1)),g&&(t.echo(r(x[i]+"分支已存在，不需要重复创建")),t.exit(1)),e.includes(i)){const e=["git fetch",`git checkout ${s}`,"git pull",`git checkout -b ${x[i]} ${s}`];u(e).then((e=>{0===e[3].code&&t.echo(`${x[i]}分支创建成功，该分支基于${s}创建，您当前已经切换到${x[i]}\n需要发版时，记得执行: ${n("gitm admin publish "+x[i])}`)}))}else t.echo(r("type只允许输入："+e.join(","))),t.exit(1)}))))}if(c.args.length>0){const i=j.name("gitm admin").usage("<command> <type>").description("发布bugfix、release、support分支").command("publish "+m(c.args));c.options.forEach((e=>{i.option(e.flags,e.description,e.defaultValue)})),i.action(((i,s)=>e(void 0,null,(function*(){const e=["bugfix","release","support"],c=l(),a=yield $();if(c||t.exit(1),e.includes(i)){const e=!v||v<3?{bugfix:["git fetch",`git checkout ${x.bugfix}`,"git pull",`git checkout ${x.release}`,"git pull",{cmd:`git merge --no-ff ${x.bugfix}`,config:{again:!1,postmsg:s.postmsg,success:`${x.bugfix}合并到${x.release}成功`,fail:`${x.bugfix}合并到${x.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],support:["git fetch",`git checkout ${x.support}`,"git pull",`git checkout ${x.release}`,"git pull",{cmd:`git merge --no-ff ${x.support}`,config:{again:!1,success:`${x.support}合并到${x.release}成功`,fail:`${x.support}合并到${x.release}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${x.bugfix}`,"git pull",{cmd:`git merge --no-ff ${x.support}`,config:{again:!1,success:`${x.support}合并到${x.bugfix}成功`,fail:`${x.support}合并到${x.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],release:["git fetch",`git checkout ${x.release}`,"git pull",`git checkout ${x.master}`,"git pull",{cmd:`git merge --no-ff ${x.release}`,config:{again:!1,success:`${x.release}合并到${x.master}成功`,fail:`${x.release}合并到${x.master}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}:{bugfix:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.bugfix}\\",\\"target_branch\\":\\"${x.release}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.bugfix}' into '${x.release}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.bugfix}分支合并到${x.release}分支的merge请求"`],support:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.support}\\",\\"target_branch\\":\\"${x.release}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.support}' into '${x.release}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.support}分支合并到${x.release}分支的merge请求"`,{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.support}\\",\\"target_branch\\":\\"${x.bugfix}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.support}' into '${x.bugfix}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.support}分支合并到${x.bugfix}分支的merge请求"`],release:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.release}\\",\\"target_branch\\":\\"${x.master}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.release}' into '${x.master}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.release}分支合并到${x.master}分支的merge请求"`]};let t;for(t in"bugfix"===i&&s.prod&&(e[i]=e[i].concat(!v||v<3?[`git checkout ${x.master}`,"git pull",{cmd:`git merge --no-ff ${x.bugfix}`,config:{again:!1,success:`${x.bugfix}合并到${x.master}成功`,fail:`${x.bugfix}合并到${x.master}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.bugfix}\\",\\"target_branch\\":\\"${x.master}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.bugfix}' into '${x.master}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.bugfix}分支合并到${x.master}分支的merge请求"`]),s.build&&(!v||v<3)&&(e[i]=e[i].concat([{cmd:`gitm build ${b} --env bug --app ${!0===s.build?"all":s.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),"release"===i&&s.build&&(!v||v<3)&&(e[i]=e[i].concat([{cmd:`gitm build ${b} --env prod --app ${!0===s.build?"all":s.build}`,config:{again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"release"===i&&s.combine&&(s.useRebase?e[i]=e[i].concat([`git checkout ${x.release}`,"git pull",`git checkout ${x.bugfix}`,{cmd:`git pull origin ${x.bugfix} --rebase`,config:{again:!0}},{cmd:`git rebase ${x.release}`,config:{again:!1,postmsg:s.postmsg,success:`${x.release}同步到${x.bugfix}成功`,fail:`${x.release}同步到${x.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):e[i]=e[i].concat(!v||v<3?[`git checkout ${x.release}`,"git pull",`git checkout ${x.bugfix}`,"git pull",{cmd:`git merge --no-ff ${x.release}`,config:{again:!1,postmsg:s.postmsg,success:`${x.release}合并到${x.bugfix}成功`,fail:`${x.release}合并到${x.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${x.release}\\",\\"target_branch\\":\\"${x.bugfix}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${x.release}' into '${x.bugfix}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${x.release}分支合并到${x.bugfix}分支的merge请求"`])),e)e[t].push(`git checkout ${a}`);u(e[i])}else t.echo(r("type只允许输入："+e.join(","))),t.exit(1)}))))}if(a.args.length>0){const e=j.name("gitm admin").usage("<command> <type> [-m --mode [mode]]").description("更新bugfix、release、support分支代码").command("update "+m(a.args));a.options.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action(((e,i)=>{const s=["bugfix","release","support"],c="release"===e?x.master:x.release;let a="";if(l()||t.exit(1),1===i.mode?a=" --strategy-option ours":2===i.mode&&(a=" --strategy-option theirs"),s.includes(e)){let t=!v||v<3?["git fetch",`git checkout ${c}`,"git pull",`git checkout ${x[e]}`,{cmd:"git pull",config:{again:!0}},{cmd:`git merge --no-ff ${c}${a}`,config:{again:!1,postmsg:i.postmsg,success:`${c}同步到${x[e]}成功`,fail:`${c}同步到${x[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${c}\\",\\"target_branch\\":\\"${x[e]}\\",\\"private_token\\":\\"${k}\\",\\"title\\":\\"Merge branch '${c}' into '${x[e]}'\\"}" "${x.gitHost}/api/v4/projects/${x.gitID}/merge_requests"`,config:{again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${_}在${b}项目提交了${c}分支合并到${x[e]}分支的merge请求"`];i.useRebase&&(t=["git fetch",`git checkout ${c}`,"git pull",`git checkout ${x[e]}`,{cmd:`git pull origin ${x[e]} --rebase`,config:{again:!0}},{cmd:`git rebase ${c}`,config:{again:!1,postmsg:i.postmsg,success:`${c}同步到${x[e]}成功`,fail:`${c}同步到${x[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]),u(t)}else t.echo(r("type只允许输入："+s.join(","))),t.exit(1)}))}if(g.args.length>0){const e=j.name("gitm admin").usage("<command> <type>").description("构建清理工作").command("clean "+m(g.args));g.options.forEach((i=>{e.option(i.flags,i.description,i.defaultValue)})),e.action((e=>{const i=["bugfix","release","develop","master"];if(l()||t.exit(1),i.includes(e)){let i=["git fetch","git checkout . -f","git clean -fd",`git checkout ${x.master}`,`git branch -D ${x[e]}`,"git fetch",`git checkout ${x[e]}`,"git pull"];"master"===e&&(i=["git checkout .","git clean -fd",`git checkout ${x.master}`,"git clean -fd","git fetch","git pull"]),u(i)}else t.echo(r("type只允许输入："+i.join(","))),t.exit(1)}))}j.parse(process.argv);
