#!/usr/bin/env node
"use strict";var e=require("commander"),t=require("shelljs"),i=require("fs"),s=require("colors"),a=require("slash"),r=require("cosmiconfig");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=c(t),o=c(i),l=c(s),g=c(a);const u={command:"admin",short:null,create:{command:"create",short:null,args:[{required:!0,name:"type",variadic:!1,validator:(e,t,i)=>{/\s+/.test(e)?i(new Error("请不要输入空格")):i()},description:"分支类型"}],options:[],validatorOpts:(e,t,i)=>{i()},validatorArgs:(e,t,i)=>{i()},transformOpts:(e,t,i)=>{i()},transformArgs:(e,t,i)=>{i()}},publish:{command:"publish",short:null,args:[{required:!0,name:"type",variadic:!1,validator:(e,t,i)=>{/\s+/.test(e)?i(new Error("请不要输入空格")):i()},description:"分支类型"}],options:[{flags:"-c, --combine",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"-c",long:"--combine",negate:!1,description:"是否把release代码同步到bug",defaultValue:!1,recommend:!1},{flags:"--use-rebase",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--use-rebase",negate:!1,description:"是否使用rebase方式更新，默认merge",defaultValue:!1,recommend:!1},{flags:"-p, --prod",required:!1,optional:!1,variadic:!1,mandatory:!1,short:"-p",long:"--prod",negate:!1,description:"发布bug分支时，是否合并bug到master",defaultValue:!1,recommend:!1},{flags:"-b, --build [build]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-b",long:"--build",negate:!1,description:"构建应用",recommend:!0},{flags:"--postmsg",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--postmsg",negate:!1,description:"发送消息",defaultValue:!1,recommend:!1}],validatorOpts:(e,t,i)=>{e.includes("--combine")&&e.includes("--prod")?i(new Error("不能同时选择“把release合并到bug”和“合并bug到master”")):i()},validatorArgs:(e,t,i)=>{i()},transformOpts:(e,t,i)=>{i()},transformArgs:(e,t,i)=>{i()}},update:{command:"update",short:null,args:[{required:!0,name:"type",variadic:!1,validator:(e,t,i)=>{/\s+/.test(e)?i(new Error("请不要输入空格")):i()},description:"分支类型"}],options:[{flags:"--use-rebase",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--use-rebase",negate:!1,description:"是否使用rebase方式更新，默认merge",defaultValue:!1,recommend:!1},{flags:"-m, --mode [mode]",required:!1,optional:!0,variadic:!1,mandatory:!1,short:"-m",long:"--mode",negate:!1,description:"出现冲突时，保留传入代码还是保留当前代码；1=采用当前 2=采用传入；默认为 0=手动处理。本参数不可与--use-rebase同时使用",defaultValue:0,recommend:!1},{flags:"--postmsg",required:!1,optional:!1,variadic:!1,mandatory:!1,long:"--postmsg",negate:!1,description:"发送消息",defaultValue:!1,recommend:!1}],validatorOpts:(e,t,i)=>{i()},validatorArgs:(e,t,i)=>{i()},transformOpts:(e,t,i)=>{i()},transformArgs:(e,t,i)=>{i()}},clean:{command:"clean",short:null,args:[{required:!0,name:"type",variadic:!1,validator:(e,t,i)=>{/\s+/.test(e)?i(new Error("请不要输入空格")):i()},description:"分支类型"}],options:[],validatorOpts:(e,t,i)=>{i()},validatorArgs:(e,t,i)=>{i()},transformOpts:(e,t,i)=>{i()},transformArgs:(e,t,i)=>{i()}}},p=u.create,f=u.publish,d=u.update,m=u.clean;function $(e=process.cwd()){const t=n.default.exec("git config --local --get remote.origin.url",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i]=t.split("\n").map((e=>e.trim())).map(g.default);return{gitUrl:i,appName:i.replace(/^[\s\S]+\/([a-z0-9A-Z-_]+)\.git$/,"$1")}}function h(e=process.cwd()){const t=n.default.exec("git rev-parse --show-toplevel --show-prefix --git-common-dir --absolute-git-dir --show-cdup",{silent:!0}).stdout.replace(/[\s]*$/g,""),[i,s,a,r,c=""]=t.split("\n").map((e=>e.trim())).map(g.default);return{prefix:s||".",gitCommonDir:a,root:i,gitDir:r,gitHookDir:r+"/hooks",cdup:c}}const b={master:"master",develop:"dev",release:"release",bugfix:"bug",support:"support",user:"",email:"",msgTemplate:"${message}；项目：${project}；路径：${pwd}",msgUrl:"",apolloConfig:"",hooks:"",api:"",gitHost:"",gitID:""};function x(e,t="gitmars"){let i;if(!e){let{root:t}=h();try{e=t+"/gitmarsconfig.json",i=o.default.statSync(e)}catch(i){e=t}}const s={skipCI:!0},a=r.cosmiconfigSync(t);if(i||(i=o.default.statSync(e)),i.isDirectory()){const{config:t={},filepath:i=""}=a.search(e)||{};return Object.assign({},b,s,t,{filepath:i})}{const{config:t={},filepath:i=""}=a.load(e)||{};return Object.assign({},b,s,t,{filepath:i})}}function v(e){return l.default.yellow(e)}function k(e){return l.default.red(e)}function y(e){return l.default.green(e)}function _(e,t){0!==e.length?t(e[0],((i=!1)=>{i||(e.shift(),_(e,t))})):t()}function j(e){return new Promise(((t,i)=>{let s=[];0===e.length&&i("指令名称不能为空"),_(e=JSON.parse(JSON.stringify(e)),((i,a)=>{let r={silent:!0,postmsg:!1,kill:!0,again:!1},c=i;i instanceof Object&&(r=Object.assign(r,i.config||{}),c=i.cmd),c?n.default.exec(c,r,((t,o,l)=>{let g=function(e){let t={},i=e.replace(/[\s]+/g," ").split(" ");if(i.length<2||"git"!==i[0])return t;switch(i[1]){case"checkout":t.success="切换分支成功",t.fail="切换分支失败";break;case"pull":t.success="拉取代码成功",t.fail="拉取代码失败";break;case"fetch":t.success="抓取成功",t.fail="抓取失败";break;case"commit":t.success="提交成功",t.fail="提交失败";break;case"push":t.success="推送成功",t.fail="推送失败";break;case"cherry-pick":t.success="同步提交记录成功",t.fail="同步提交记录失败";break;case"merge":t.success="merge分支成功",t.fail="merge分支失败";break;case"rebase":t.success="rebase分支成功",t.fail="rebase分支失败";break;case"revert":t.success="撤销成功",t.fail="撤销失败";break;case"clean":t.success="清理成功",t.fail="清理失败"}return t}(c);try{o=JSON.parse(o)}catch(l){o=o.replace(/\n*$/g,"")}if(s.push({code:t,out:o,err:l,cfg:r,cmd:c}),0!==t&&function(e){const{gitDir:t}=h();n.default.touch(t+"/.gitmarslog"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarslog")}({command:i,code:t,out:o,err:l}),0!==t&&r.kill){let t=JSON.parse(JSON.stringify(e));r.again?!0!==r.again&&t.splice(0,1,r.again):t.shift(),a(!0),function(e){const{gitDir:t}=h();n.default.touch(t+"/.gitmarscommands"),n.default.sed("-i",/[\s\S\n\r\x0a\x0d]*/,encodeURIComponent(JSON.stringify(e)),t+"/.gitmarscommands")}(t),r.silent&&n.default.echo(k(l)),n.default.echo(k(r.fail||g.fail||"出错了！指令 "+c+" 执行失败，中断了进程")),r.postmsg&&w("出错了！指令 "+c+" 执行失败，中断了进程"),t.length>0&&n.default.echo(k("请处理相关问题之后输入gitm continue继续")),n.default.exit(1)}else{if(0===t){let e=r.success||g.success;e&&(n.default.echo(y(e)),r.postmsg&&w(e))}else{let e=r.fail||g.fail||"指令 "+c+" 执行失败";e&&n.default.echo(v(e))}a()}})):t(s)}))}))}function O(){let e=function(e={}){const{silent:t=!0}=e,i=n.default.exec("git status -s --no-column",{silent:t}).stdout.replace(/(^\s+|\n*$)/g,"");let s=i?i.replace(/\n(\s+)/g,"\n").split("\n"):[],a={A:[],D:[],M:[],"??":[]};return 0===s.length||s.forEach((e=>{let t=e.trim().replace(/\s+/g," ").split(" "),i=t.splice(0,1);a[i]||(a[i]=[]),a[i].push(t.join(" "))})),a}({silent:!1});return e.A.length>0||e.D.length>0||e.M.length>0?(n.default.echo(k("您还有未提交的文件，请处理后再继续")+"\n如果需要暂存文件请执行: gitm save\n恢复时执行：gitm get"),n.default.exit(1),!1):(e["??"].length>0&&n.default.echo(v("您有未加入版本的文件,")+"\n如果需要暂存文件请执行: gitm save --force\n恢复时执行：gitm get"),!0)}const q=async e=>(await j([`gitm branch -k ${e}`]))[0].out.replace(/^\s+/,"");function w(e=""){const t=x();if(!t.msgTemplate)return void n.default.echo(k("请配置消息发送api模板地址"));let i=(s=t.msgTemplate,a=t=>"message"===t?e:function(e){const{root:t}=h(),{appName:i}=$(),s=x();let a="",r=new Date;switch(e){case"time":a=r;break;case"timeNum":a=r.getTime();break;case"pwd":a=t;break;case"project":a=i;break;case"user":a=s.user}return a}(t),s&&a?""+s.replace(/\$\{([a-zA-Z0-9-_]+)\}/g,((e,t)=>{if("function"==typeof a)return a(t);for(let e in a)if(t===e)return a[e]})):null);var s,a;t.msgUrl&&function(e="",t={}){const i=x(),{silent:s=!0}=t;if(!i.msgUrl)return void n.default.echo(k("请配置消息推送地址"));e=e.replace(/\s/g,""),i.msgUrl&&n.default.exec(`curl -i -H "Content-Type: application/json" -X POST -d '{"envParams":{"error_msg":"'${e}'"}}' "${i.msgUrl}"`,{silent:s})}(i)}function S(e){let t=[];return e.forEach((e=>{let i=e.name;e.variadic&&(i+="..."),i=e.required?"<"+i+">":"["+i+"]",t.push(i)})),t.join(" ")}n.default.exec("git rev-parse --is-inside-work-tree",{silent:!0}).stdout.includes("true")||(n.default.echo(k("当前目录不是git项目目录")),n.default.exit(1));const{appName:T}=$(),D=x(),{token:H,level:C,nickname:A=""}=D.api?function(){const e=x();e.api||(n.default.echo(k("请配置用于请求权限的api接口地址，接收参数形式：url?name=git_user_name，返回data=token")),process.exit(1));const t=n.default.exec("git config user.name",{silent:!0}).stdout.replace(/(^\s+|\n*$)/g,"");t||(n.default.echo(k("请设置本地git用户名")),process.exit(1));let i,s=n.default.exec(`curl -s ${e.api}?name=${t}`,{silent:!0}).stdout;try{s=JSON.parse(s),i=s.data||null}catch(e){i=null}return i?i.token||(n.default.echo(k("请设置access_token")),process.exit(1)):(n.default.echo(k("没有找到用户，请联系管理员")),process.exit(1)),i}():{},E=new e.Command;if(p.args.length>0){const e=E.name("gitm admin").usage("<command> <type>").description("创建bugfix、release、develop和support分支").command("create "+S(p.args));p.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((async e=>{const t=["bugfix","release","develop","support"];let i="release"===e?D.master:D.release,s=O(),a=await q(i),r=await q(D[e]);if(s||n.default.exit(1),a||(n.default.echo(k(i+"分支不存在，请先创建"+i+"分支")),n.default.exit(1)),r&&(n.default.echo(k(D[e]+"分支已存在，不需要重复创建")),n.default.exit(1)),t.includes(e)){j(["git fetch",`git checkout ${i}`,"git pull",`git checkout -b ${D[e]} ${i}`]).then((t=>{0===t[3].code&&n.default.echo(`${D[e]}分支创建成功，该分支基于${i}创建，您当前已经切换到${D[e]}\n需要发版时，记得执行: ${y("gitm admin publish "+D[e])}`)}))}else n.default.echo(k("type只允许输入："+t.join(","))),n.default.exit(1)}))}if(f.args.length>0){const e=E.name("gitm admin").usage("<command> <type>").description("发布bugfix、release、support分支").command("publish "+S(f.args));f.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((async(e,t)=>{const i=["bugfix","release","support"];let s=O(),a=await n.default.exec("git symbolic-ref --short -q HEAD",{silent:!0}).stdout.replace(/[\n\s]*$/g,"");if(s||n.default.exit(1),i.includes(e)){let i=!C||C<3?{bugfix:["git fetch",`git checkout ${D.bugfix}`,"git pull",`git checkout ${D.release}`,"git pull",{cmd:`git merge --no-ff ${D.bugfix}`,config:{slient:!1,again:!1,postmsg:t.postmsg,success:`${D.bugfix}合并到${D.release}成功`,fail:`${D.bugfix}合并到${D.release}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],support:["git fetch",`git checkout ${D.support}`,"git pull",`git checkout ${D.release}`,"git pull",{cmd:`git merge --no-ff ${D.support}`,config:{slient:!1,again:!1,success:`${D.support}合并到${D.release}成功`,fail:`${D.support}合并到${D.release}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}},`git checkout ${D.bugfix}`,"git pull",{cmd:`git merge --no-ff ${D.support}`,config:{slient:!1,again:!1,success:`${D.support}合并到${D.bugfix}成功`,fail:`${D.support}合并到${D.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}],release:["git fetch",`git checkout ${D.release}`,"git pull",`git checkout ${D.master}`,"git pull",{cmd:`git merge --no-ff ${D.release}`,config:{slient:!1,again:!1,success:`${D.release}合并到${D.master}成功`,fail:`${D.release}合并到${D.master}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]}:{bugfix:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.bugfix}\\",\\"target_branch\\":\\"${D.release}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.bugfix}' into '${D.release}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.bugfix}分支合并到${D.release}分支的merge请求"`],support:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.support}\\",\\"target_branch\\":\\"${D.release}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.support}' into '${D.release}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.support}分支合并到${D.release}分支的merge请求"`,{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.support}\\",\\"target_branch\\":\\"${D.bugfix}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.support}' into '${D.bugfix}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.support}分支合并到${D.bugfix}分支的merge请求"`],release:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.release}\\",\\"target_branch\\":\\"${D.master}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.release}' into '${D.master}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.release}分支合并到${D.master}分支的merge请求"`]};"bugfix"===e&&t.prod&&(i[e]=i[e].concat(!C||C<3?[`git checkout ${D.master}`,"git pull",{cmd:`git merge --no-ff ${D.bugfix}`,config:{slient:!1,again:!1,success:`${D.bugfix}合并到${D.master}成功`,fail:`${D.bugfix}合并到${D.master}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.bugfix}\\",\\"target_branch\\":\\"${D.master}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.bugfix}' into '${D.master}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.bugfix}分支合并到${D.master}分支的merge请求"`]),t.build&&(!C||C<3)&&(i[e]=i[e].concat([{cmd:`gitm build ${T} --env bug --app ${!0===t.build?"all":t.build}`,config:{slient:!0,again:!1,success:"调起构建成功",fail:"调起构建失败"}}]))),"release"===e&&t.build&&(!C||C<3)&&(i[e]=i[e].concat([{cmd:`gitm build ${T} --env prod --app ${!0===t.build?"all":t.build}`,config:{slient:!0,again:!1,success:"调起构建成功",fail:"调起构建失败"}}])),"release"===e&&t.combine&&(t.useRebase?i[e]=i[e].concat([`git checkout ${D.release}`,"git pull",`git checkout ${D.bugfix}`,{cmd:`git pull origin ${D.bugfix} --rebase`,config:{slient:!1,again:!0}},{cmd:`git rebase ${D.release}`,config:{slient:!1,again:!1,postmsg:t.postmsg,success:`${D.release}同步到${D.bugfix}成功`,fail:`${D.release}同步到${D.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]):i[e]=i[e].concat(!C||C<3?[`git checkout ${D.release}`,"git pull",`git checkout ${D.bugfix}`,"git pull",{cmd:`git merge --no-ff ${D.release}`,config:{slient:!1,again:!1,postmsg:t.postmsg,success:`${D.release}合并到${D.bugfix}成功`,fail:`${D.release}合并到${D.bugfix}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${D.release}\\",\\"target_branch\\":\\"${D.bugfix}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${D.release}' into '${D.bugfix}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${D.release}分支合并到${D.bugfix}分支的merge请求"`]));for(let e in i)i[e].push(`git checkout ${a}`);j(i[e])}else n.default.echo(k("type只允许输入："+i.join(","))),n.default.exit(1)}))}if(d.args.length>0){const e=E.name("gitm admin").usage("<command> <type> [-m --mode [mode]]").description("更新bugfix、release、support分支代码").command("update "+S(d.args));d.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action(((e,t)=>{const i=["bugfix","release","support"];let s="release"===e?D.master:D.release,a="";if(O()||n.default.exit(1),1===t.mode?a=" --strategy-option ours":2===t.mode&&(a=" --strategy-option theirs"),i.includes(e)){let i=!C||C<3?["git fetch",`git checkout ${s}`,"git pull",`git checkout ${D[e]}`,{cmd:"git pull",config:{slient:!1,again:!0}},{cmd:`git merge --no-ff ${s}${a}`,config:{slient:!1,again:!1,postmsg:t.postmsg,success:`${s}同步到${D[e]}成功`,fail:`${s}同步到${D[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]:[{cmd:`curl -i -H "Content-Type: application/json" -X POST -d "{\\"source_branch\\":\\"${s}\\",\\"target_branch\\":\\"${D[e]}\\",\\"private_token\\":\\"${H}\\",\\"title\\":\\"Merge branch '${s}' into '${D[e]}'\\"}" "${D.gitHost}/api/v4/projects/${D.gitID}/merge_requests"`,config:{slient:!1,again:!0,success:"成功创建合并请求",fail:"创建合并请求出错了，请根据提示处理"}},`gitm postmsg "${A}在${T}项目提交了${s}分支合并到${D[e]}分支的merge请求"`];t.useRebase&&(i=["git fetch",`git checkout ${s}`,"git pull",`git checkout ${D[e]}`,{cmd:`git pull origin ${D[e]} --rebase`,config:{slient:!1,again:!0}},{cmd:`git rebase ${s}`,config:{slient:!1,again:!1,postmsg:t.postmsg,success:`${s}同步到${D[e]}成功`,fail:`${s}同步到${D[e]}出错了，请根据提示处理`}},{cmd:"git push",config:{slient:!1,again:!0,success:"推送成功",fail:"推送失败，请根据提示处理"}}]),j(i)}else n.default.echo(k("type只允许输入："+i.join(","))),n.default.exit(1)}))}if(m.args.length>0){const e=E.name("gitm admin").usage("<command> <type>").description("构建清理工作").command("clean "+S(m.args));m.options.forEach((t=>{e.option(t.flags,t.description,t.defaultValue)})),e.action((e=>{const t=["bugfix","release","develop","master"];if(O()||n.default.exit(1),t.includes(e)){let t=["git fetch","git checkout . -f","git clean -fd",`git checkout ${D.master}`,`git branch -D ${D[e]}`,"git fetch",`git checkout ${D[e]}`,"git pull"];"master"===e&&(t=["git checkout .","git clean -fd",`git checkout ${D.master}`,"git clean -fd","git fetch","git pull"]),j(t)}else n.default.echo(k("type只允许输入："+t.join(","))),n.default.exit(1)}))}E.parse(process.argv);
